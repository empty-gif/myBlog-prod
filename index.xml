<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>welcome</title>
    <link>https://578164.xyz/</link>
    <description>Recent content on welcome</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 02 Sep 2024 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://578164.xyz/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>About</title>
      <link>https://578164.xyz/about/</link>
      <pubDate>Mon, 01 Jul 2019 21:38:52 +0800</pubDate>
      
      <guid>https://578164.xyz/about/</guid>
      
        <description>&lt;p&gt;name：h1yx&lt;br&gt;
email：h1yx@outlook.com&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Code restoration technology: Unidbg hook_add_new to achieve conditional breakpoints (Part 2)</title>
      <link>https://578164.xyz/post/other/code-restoration-technology-unidbg-hook-add-new-to-achieve-conditional-breakpointspart2/</link>
      <pubDate>Mon, 02 Sep 2024 00:00:00 +0000</pubDate>
      
      <guid>https://578164.xyz/post/other/code-restoration-technology-unidbg-hook-add-new-to-achieve-conditional-breakpointspart2/</guid>
      
        <description>&lt;h2 id=&#34;1-objectives&#34;&gt;1. Objectives&lt;/h2&gt;
&lt;p&gt;When doing code restoration, sometimes you will analyze a set of results and hope to set a conditional breakpoint in the middle, such as triggering a breakpoint at code line 0x1234, R0=0x5678.&lt;/p&gt;
&lt;p&gt;Let’s try it today.&lt;/p&gt;
&lt;h6 id=&#34;tip&#34;&gt;Tip:&lt;/h6&gt;
&lt;p&gt;The Unidbg code has been synchronized to the latest official version, which already supports the display of floating-point registers.&lt;/p&gt;
&lt;h2 id=&#34;2-steps&#34;&gt;2. Steps&lt;/h2&gt;
&lt;h3 id=&#34;write-a-floatdemotwo-first&#34;&gt;Write a floatdemotwo first&lt;/h3&gt;
&lt;p&gt;Upgrade the ancestral algorithm&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;extern &amp;#34;C&amp;#34; JNIEXPORT jstring JNICALL
Java_com_h1yx_app_floatdemo_MainActivity_stringFromJNI(
        JNIEnv* env,
        jobject Obj, jdouble value) {
    std::string hello = &amp;#34;Hello from C++&amp;#34;;

    double p=3.14159;
    double s,v,rc;

    for(int i=0 ; i&amp;lt; 10; i++){
        hello +=&amp;#34;\n&amp;#34;;

        v = 2*p* (value + i);
        s = p * (value + i) * (value + i);

        rc = v+s;

        hello += std::to_string(rc);

    }

    return env-&amp;gt;NewStringUTF(hello.c_str());
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Calculate the sum of the circumference and area of 10 circles.&lt;/p&gt;
&lt;p&gt;The printed result is like this&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Hello from C++
150.796320
197.920170
251.327200
311.017410
376.990800
449.247370
527.787120
612.610050
703.716160
801.105450&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Our goal is to achieve results equal to449.247370When the breakpoint is triggered, pretend to analyze the following527.787120The calculation process.&lt;/p&gt;
&lt;h3 id=&#34;ida&#34;&gt;IDA&lt;/h3&gt;
&lt;p&gt;We set a breakpoint at 0x127C0 and single-step a few times until we reach 0x127D4. After executing the addition instruction &lt;strong&gt;FADD D0, D1, D0 , we can see that the value of D0 is&lt;/strong&gt; &lt;strong&gt;150.796320&lt;/strong&gt; .&lt;/p&gt;
&lt;p&gt;This is the target. We set the conditional breakpoint at 0x127D4, which is triggered when D0=449.247370.&lt;/p&gt;
&lt;h3 id=&#34;hook_add_new&#34;&gt;hook_add_new&lt;/h3&gt;
&lt;p&gt;First create a ffcodehook class, inherit from com.github.unidbg.arm.backend.CodeHook and then add it to the emulator&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;// com/h1yx/test/runfloatdemo.java
analyseHookA = new FFCodehook(emulator);
emulator.getBackend().hook_add_new(analyseHookA, module.base + 0x127D8, module.base + 0x127D8, emulator);

// com/h1yx/test/ffcodehook.java
public class FFCodehook implements CodeHook {
    private final Emulator&amp;lt;?&amp;gt; emulator;
    public FFCodehook(Emulator&amp;lt;?&amp;gt; emulator) {
        super();

        this.emulator = emulator;
    }

    private Unicorn.UnHook unHook;

    @Override
    public void onAttach(Unicorn.UnHook unHook) {
        if (this.unHook != null) {
            throw new IllegalStateException();
        }
        this.unHook = unHook;
    }

    @Override
    public void detach() {
        if (unHook != null) {
            unHook.unhook();
            unHook = null;
        }
    }

    private static BigInteger newBigInteger(byte[] data) {
        if (data.length != 16) {
            throw new IllegalStateException(&amp;#34;data.length=&amp;#34; + data.length);
        }
        byte[] copy = Arrays.copyOf(data, data.length);
        for (int i = 0; i &amp;lt; 8; i++) {
            byte b = copy[i];
            copy[i] = copy[15 - i];
            copy[15 - i] = b;
        }
        byte[] bytes = new byte[copy.length + 1];
        System.arraycopy(copy, 0, bytes, 1, copy.length); // makePositive
        return new BigInteger(bytes);
    }

    @Override
    public void hook(Backend backend, long address, int size, Object user) {
        try {
            if (address == 0x400127d8) {

                byte[] data = backend.reg_read_vector(Arm64Const.UC_ARM64_REG_Q0);
                if (data != null) {
                    String strShow = String.format(Locale.US, &amp;#34; Q0=0x%s%s&amp;#34;, newBigInteger(data).toString(16), Utils.decodeVectorRegister(data));
                    System.out.println(&amp;#34;##### value  &amp;#34; + strShow);
                }
            }
        } catch (BackendException e) {
            throw new IllegalStateException(e);
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;In this way, the value of D0 when running to the 0x127D8 instruction can be printed out.&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;##### value   Q0=0x4062d97b7414a4d2(150.79631999999998)
##### value   Q0=0x4068bd72085b1854(197.92016999999998)
##### value   Q0=0x406f6a786c22680a(251.3272)
##### value   Q0=0x407370474fb549fa(311.01741000000004)
##### value   Q0=0x40778fda5119ce07(376.9908)
##### value   Q0=0x407c13f53a3ec02f(449.24737)
##### value   Q0=0x40807e4c05921038(527.78712)
##### value   Q0=0x408324e161e4f765(612.6100499999999)
##### value   Q0=0x4085fdbab21815a0(703.71616)
##### value   Q0=0x408908d7f62b6ae8(801.10545)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&#34;come-on-a-condition&#34;&gt;Come on a condition&lt;/h3&gt;
&lt;p&gt;Now we can make a judgment. When &lt;strong&gt;D0=449.247370,&lt;/strong&gt; we will break on the next line and enter the debugging mode.&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;double bOutD = bytes2Double(data);
if(bOutD == 449.247370){
        Debugger MyDbg = emulator.attach(DebuggerType.CONSOLE);
    MyDbg.addBreakPoint(0x400127dc);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;OK, we have successfully entered the debugging mode, and we can analyze the following527.787120The calculation process.&lt;/p&gt;
&lt;p&gt;Note: Floating point numbers cannot be directly judged using == because the precision is different. A safer approach is as follows:&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;final double THRESHOLD = .0001;
double bOutD = bytes2Double(data);
if (Math.abs(bOutD - 449.247370 ) &amp;lt; THRESHOLD) {
        ...
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Conditional breakpoints are useful when analyzing a set of data.&lt;/p&gt;
&lt;p&gt;hook_add_new can actually be used as an Inline Hook. You may ask, isn&amp;rsquo;t it better to use xhook and some other Hook tools for Inline Hook?&lt;/p&gt;
&lt;p&gt;Wukong, when you encounter those monsters with great powers that can detect whether important codes have been modified, you will remember the benefits of &amp;ldquo;hardware breakpoints&amp;rdquo;.&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>A series of operations merged the Unidbg update and continued to run the sign</title>
      <link>https://578164.xyz/post/other/a-series-of-operations-merged-the-unidbg-update-and-continued-to-run-the-sign/</link>
      <pubDate>Fri, 12 Apr 2024 00:00:00 +0000</pubDate>
      
      <guid>https://578164.xyz/post/other/a-series-of-operations-merged-the-unidbg-update-and-continued-to-run-the-sign/</guid>
      
        <description>&lt;h2 id=&#34;1-objectives&#34;&gt;1. Objectives&lt;/h2&gt;
&lt;p&gt;The author of Unidbg has been updating quite frequently recently. We have to keep up with him so as not to be left behind.&lt;/p&gt;
&lt;h2 id=&#34;2-analysis&#34;&gt;2. Analysis&lt;/h2&gt;
&lt;h3 id=&#34;code-comparison&#34;&gt;Code comparison&lt;/h3&gt;
&lt;p&gt;Pull back the latest code first&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;git pull&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Then compared with our previous code, it seems that there are a lot of changes. I merged 3-5 files manually and vomited blood&amp;hellip;&lt;/p&gt;
&lt;h3 id=&#34;git&#34;&gt;git&lt;/h3&gt;
&lt;p&gt;As a certified senior programmer, I actually still merged codes manually, and my boss almost suspected that my senior certificate was issued in Zhongguancun.&lt;/p&gt;
&lt;p&gt;Our goal now is to merge the latest updates from &lt;a href=&#34;https://github.com/zhkl0228/unidbg&#34;&gt;https://github.com/zhkl0228/unidbg .&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;first&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;h1yxMac:unidbg h1yx$ git remote -v  
origin        https://github.com/h1yx331/unidbg.git (fetch)
origin        https://github.com/h1yx331/unidbg.git (push)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Then add the remote repository to be synchronized&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;git remote add upstream https://github.com/zhkl0228/unidbg&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Check the status again&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;h1yxMac:unidbg h1yx$ git remote -v
origin        https://github.com/h1yx331/unidbg.git (fetch)
origin        https://github.com/h1yx331/unidbg.git (push)
upstream        https://github.com/zhkl0228/unidbg (fetch)
upstream        https://github.com/zhkl0228/unidbg (push)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;No problem, added successfully&lt;/p&gt;
&lt;p&gt;Then start merging.&lt;/p&gt;
&lt;p&gt;First fetch all remote branches and store them locally&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;h1yxMac:unidbg h1yx$ git fetch upstream
remote: Enumerating objects: 6513, done.
remote: Counting objects: 100% (1205/1205), done.
remote: Compressing objects: 100% (269/269), done.
remote: Total 6513 (delta 870), reused 1123 (delta 814), pack-reused 5308
Receiving objects: 100% (6513/6513), 30.48 MiB | 6.00 MiB/s, done.
Resolving deltas: 100% (2852/2852), completed with 206 local objects.
From https://github.com/zhkl0228/unidbg
 * [new branch]        master     -&amp;gt; upstream/master
 * [new tag]           v0.9.2     -&amp;gt; v0.9.2
 * [new tag]           v0.9.3     -&amp;gt; v0.9.3&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Then the merger officially started&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;git merge upstream/master&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;A vi-like interface appears, requiring us to fill in the log.&lt;/p&gt;
&lt;p&gt;Press the I key, then enter update and then esc → shift+: → wq to save and exit&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;h1yxMac:unidbg h1yx$ git merge upstream/master
Removing unidbg-dynarmic/src/test/java/com/github/unidbg/arm/backend/dynarmic/DynarmicTest.java
Removing unidbg-dynarmic/src/test/java/com/github/unidbg/arm/backend/DynarmicBackendTest.java
Removing unidbg-dynarmic/src/main/java/com/github/unidbg/arm/backend/dynarmic/DynarmicLoader.java
Removing unidbg-api/src/main/java/com/github/unidbg/arm/backend/dynarmic/EventMemHookNotifier.java
Auto-merging unidbg-android/src/main/java/com/github/unidbg/linux/android/dvm/DalvikVM.java
Auto-merging unidbg-android/src/main/java/com/github/unidbg/linux/android/dvm/AbstractJni.java
Merge made by the &amp;#39;recursive&amp;#39; strategy.
 .gitignore                                                |    4 +-
 README.md                                                 |   14 +-
 backend/dynarmic/README.md                                |    3 +
 {unidbg-dynarmic =&amp;gt; backend/dynarmic}/pom.xml             |    7 +-
 .../com/github/unidbg/arm/backend/DynarmicBackend.java    |  138 +--
 .../com/github/unidbg/arm/backend/DynarmicFactory.java    |   29 +
 .../com/github/unidbg/arm/backend/dynarmic/Dynarmic.java  |   21 +-
 .../unidbg/arm/backend/dynarmic/DynarmicBackend32.java    |    2 +-
 .../unidbg/arm/backend/dynarmic/DynarmicBackend64.java    |    2 +-
......&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;It seems like it&amp;rsquo;s going quite smoothly. Has it been merged?&lt;/p&gt;
&lt;h3 id=&#34;try-running&#34;&gt;Try running&lt;/h3&gt;
&lt;p&gt;I knew it wouldn&amp;rsquo;t go this smoothly.&lt;/p&gt;
&lt;p&gt;The function to create the Emulator has changed&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;private static AndroidEmulator createARMEmulator() {
        return AndroidEmulatorBuilder
                .for32Bit()
                .build();
        // return new AndroidARMEmulator(&amp;#34;test&amp;#34;);
    }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Run again&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;st=1606701201628&amp;amp;sign=59039230dc2e1ea27a4f250d9ec81b8c&amp;amp;sv=111
destroy
run&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;This value looks familiar.&lt;/p&gt;
&lt;p&gt;Finally, update to our GitHub fork directlygit push origin masterThat&amp;rsquo;s fine.&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>QBDI User Guide</title>
      <link>https://578164.xyz/post/other/qbdi-user-guide/</link>
      <pubDate>Mon, 25 Dec 2023 00:00:00 +0000</pubDate>
      
      <guid>https://578164.xyz/post/other/qbdi-user-guide/</guid>
      
        <description>&lt;h2 id=&#34;1-objectives&#34;&gt;1. Objectives&lt;/h2&gt;
&lt;p&gt;Today I would like to introduce a new friend to you, &lt;a href=&#34;https://qbdi.quarkslab.com/&#34;&gt;QBDI&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It can be quickly integrated into your frida script to perform assembly-level trace&lt;/p&gt;
&lt;h2 id=&#34;2-steps&#34;&gt;2. Steps&lt;/h2&gt;
&lt;h3 id=&#34;install&#34;&gt;Install&lt;/h3&gt;
&lt;p&gt;It is very convenient to use QBDI on Android. First go to the official website to download the latest version&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/QBDI/QBDI/releases/download/v0.10.0/QBDI-0.10.0-android-AARCH64.tar.gz&#34;&gt;https://github.com/QBDI/QBDI/releases/download/v0.10.0/QBDI-0.10.0-android-AARCH64.tar.gz&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For our use of Frida, there are mainly two files in itlibQBDI.soandfrida-qbdi.js, the former is the injection library, the latter is the js encapsulation&lt;/p&gt;
&lt;p&gt;Then putlibQBDI.soPut it in the /data/local/tmp directory&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;adb push libQBDI.so /data/local/tmp&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&#34;use&#34;&gt;use&lt;/h3&gt;
&lt;p&gt;The first usage is to actively call the target function to trace&lt;/p&gt;
&lt;p&gt;Because it needs to loadfrida-qbdi.jsModule, so here we need to use frida&amp;rsquo;s module development. The usual method is to use a template using TS from big bearded &lt;a href=&#34;https://github.com/oleavr/frida-agent-example&#34;&gt;https://github.com/oleavr/frida-agent-example .&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;But I&amp;rsquo;m too lazy to learn another TS language, so today we use another method&lt;/p&gt;
&lt;p&gt;index.js&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;import {
    VM,
    InstPosition,
    VMAction,
    Options,
    MemoryAccessType,
    AnalysisType,
    RegisterAccessType,
    OperandType,
    SyncDirection
} from &amp;#34;./frida-qbdi.js&amp;#34;;

.... call fridaQBDI&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Then compile using frida-compile&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;frida-compile -w index.js -o frida-qbdi-agent.js
frida -Uf com.example.myapplication --runtime=v8 -l frida-qbdi-agent.js&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&#34;active-call&#34;&gt;Active call&lt;/h3&gt;
&lt;p&gt;Consider that there is an addTesth1yx function in the so in the apk&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;extern &amp;#34;C&amp;#34; int addTesth1yx(){
    int a = 2;
    int b = 3;
    int c = a ^ b;
    c = c + a + b;
    LOGD(&amp;#34;addTesth1yx : %d&amp;#34;, c);
    return c;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;We can use the following method to actively call in warp_vm_run.js&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/**
 * warp_vm_run
 * @param {*} vm_run_func   
 * @param {*} log_file_path 
 */
export default function warp_vm_run(vm_run_func, log_file_path) {
    let libnative_name = &amp;#34;libmyapplication.so&amp;#34;; 
    let func_name = &amp;#34;addTesth1yx&amp;#34;;

    let libnative_base = Process.findModuleByName(libnative_name).base;
    console.log(&amp;#34;warp_vm_run libnative_base 0x&amp;#34; +  libnative_base.toString(16));

    const func_addr = Module.findExportByName(libnative_name, func_name);
    console.log(&amp;#34;func_addr = &amp;#34; + func_addr);

    let ret = vm_run_func(null,func_addr, [], log_file_path,false);
        console.log(ret);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Then hang up your beloved frida and execute&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Failed to load /data/local/tmp/libQBDI.so (dlopen failed: couldn&amp;#39;t map &amp;#34;/data/local/tmp/libQBDI.so&amp;#34; segment 1: Permission denied)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;It&amp;rsquo;s an error. I don&amp;rsquo;t have permission. Then give it&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#setenforce 0&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Each line of executed code, register changes, and memory read and write are printed out&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;start vm.call ===
0x77d5661b00 [libmyapplication.so!0x1eb00]         stp        x29, x30, [sp, #-16]!         r[FP=0x77d6b03100 LR=0x2a SP=0x77d6b03080]   w[SP=0x77d6b03070]
memory write at 77d6b03070, data size = 8, data value = 77d6b03100
memory write at 77d6b03078, data size = 8, data value = 2a
0x77d5661b04 [libmyapplication.so!0x1eb04]         mov        x29, sp         r[SP=0x77d6b03070]   w[FP=0x77d6b03070]
0x77d5661b08 [libmyapplication.so!0x1eb08]         adrp        x8, #172032          w[X8=0x77d568b000]
0x77d5661b0c [libmyapplication.so!0x1eb0c]         ldrb        w8, [x8, #3912]         r[X8=0x77d568b000]   w[W8=0x1]
memory read at 77d568bf48, data size = 1, data value = 1
0x77d5661b10 [libmyapplication.so!0x1eb10]         cbz        w8, #32         r[W8=0x1]
0x77d5661b14 [libmyapplication.so!0x1eb14]         adrp        x1, #-40960          w[X1=0x77d5657000]
0x77d5661b18 [libmyapplication.so!0x1eb18]         adrp        x2, #-40960           w[X2=0x77d5657000]
0x77d5661b1c [libmyapplication.so!0x1eb1c]         add        x1, x1, #1895         r[X1=0x77d5657000]   w[X1=0x77d5657767]
0x77d5661b20 [libmyapplication.so!0x1eb20]         add        x2, x2, #806         r[X2=0x77d5657000]   w[X2=0x77d5657326]
0x77d5661b24 [libmyapplication.so!0x1eb24]         mov        w0, #3          w[W0=0x3]
0x77d5661b28 [libmyapplication.so!0x1eb28]         mov        w3, #6          w[W3=0x6]
0x77d5661b2c [libmyapplication.so!0x1eb2c]         bl        #148868         r[SP=0x77d6b03070] w[LR=0x77d5661b30]
0x77d56860b0 [libmyapplication.so!0x430b0]         adrp        x16, #16384         w[X16=0x77d568a000]
0x77d56860b4 [libmyapplication.so!0x430b4]         ldr        x17, [x16, #3032]         r[X16=0x77d568a000] w[X17=0x78cb2dd788]
memory read at 77d568abd8, data size = 8, data value = 78cb2dd788
0x77d56860b8 [libmyapplication.so!0x430b8]         add        x16, x16, #3032         r[X16=0x77d568a000] w[X16=0x77d568abd8]
0x77d56860bc [libmyapplication.so!0x430bc]         br        x17         r[X17=0x78cb2dd788]
0x77d5661b30 [libmyapplication.so!0x1eb30]         mov        w0, #6         w[W0=0x6]
0x77d5661b34 [libmyapplication.so!0x1eb34]         ldp        x29, x30, [sp], #16         r[SP=0x77d6b03070]  w[FP=0x77d6b03100 LR=0x2a SP=0x77d6b03080]
memory read at 77d6b03070, data size = 8, data value = 77d6b03100
memory read at 77d6b03078, data size = 8, data value = 2a
0x77d5661b38 [libmyapplication.so!0x1eb38]         ret         r[LR=0x2a]
cost is 0.063s
0x6&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;If you want to call a function with parameters, you can do it like this&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;let ret = vm_run_func(null,func_addr, [2,3], log_file_path);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&#34;hook-replacement&#34;&gt;Hook Replacement&lt;/h3&gt;
&lt;p&gt;Sometimes, we don’t want to construct parameters to actively call functions, but want to hook and replace the target function during the execution of the app, and then print its actual process.&lt;/p&gt;
&lt;p&gt;There are two points to note here: 1 is replacement, and 2 is updating the context, that is, updating the value of the register&lt;/p&gt;
&lt;p&gt;In the vm_run function of the traceCodeQBDI.js file,&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;function vm_run(ctx,func_ptr, args, log_file_path,postSync) {
    let start_time = new Date().getTime();

    let vm = new VM();
    vm.setOptions(Options.OPT_DISABLE_LOCAL_MONITOR | Options.OPT_BYPASS_PAUTH | Options.OPT_ENABLE_BTI)

    var state = vm.getGPRState();
    vm.allocateVirtualStack(state, 0x100000);

    if(postSync){
        console.log(&amp;#34;==== synchronizeContext FRIDA_TO_QBDI &amp;#34;);
        state.synchronizeContext(ctx,SyncDirection.FRIDA_TO_QBDI);
    }

    ......

    if(postSync){
        console.log(&amp;#34;synchronizeContext QBDI_TO_FRIDA ====&amp;#34;);
        state.synchronizeContext(ctx,SyncDirection.QBDI_TO_FRIDA);
    }
    return ret;

}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Then replace it in warp_vm_run&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;export default function warp_vm_run(vm_run_func, log_file_path) {
    let libnative_name = &amp;#34;libmyapplication.so&amp;#34;;

    let libnative_base = Process.findModuleByName(libnative_name).base;
    console.log(&amp;#34;warp_vm_run libnative_base 0x&amp;#34; +  libnative_base.toString(16));

    //*
    let env = Java.vm.tryGetEnv();
    console.log(JSON.stringify(env));

       let func_name = &amp;#34;Java_com_example_myapplication_MainActivity_FFTestAdd&amp;#34;;
       let func_addr = Module.findExportByName(libnative_name, func_name);
    console.log(&amp;#34;Hook func_addr = &amp;#34; + func_addr);

    Interceptor.replace(func_addr,new NativeCallback(function (vmEnv,vmContext,a,b){
        console.log(&amp;#34; ============== &amp;#34;);
        console.log(&amp;#34;[+] &amp;#34; + func_addr.sub(libnative_base) + &amp;#34;(&amp;#34; + a + &amp;#34;, &amp;#34; + b + &amp;#34;) called&amp;#34;);

        Interceptor.revert(func_addr);
        Interceptor.flush();
        console.log(env.handle);

        var retVal = vm_run_func(this.context, func_addr, [vmEnv,vmContext,a,b],log_file_path,true);
        warp_vm_run(vm_run_func,log_file_path);

        const resultStr = env.stringFromJni(retVal);
        console.log(&amp;#34;Result: &amp;#34; + resultStr);

        return retVal;
    }, &amp;#34;pointer&amp;#34;, [&amp;#34;pointer&amp;#34;, &amp;#34;pointer&amp;#34;,&amp;#34;int&amp;#34;,&amp;#34;int&amp;#34;]));
    // */


}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;This execution can print out the instructions when the actual app is running.&lt;/p&gt;
&lt;h6 id=&#34;tip&#34;&gt;Tip:&lt;/h6&gt;
&lt;p&gt;If there are parameters such as jobject MainActivity /* this */ in the function parameters, no matter it is an active call or a hook call, it will crash when the function returns. The reason has not been found yet:(&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Instruction-level trace also has many application scenarios, such as printing only XOR instructions, or monitoring only SVC instructions.&lt;/p&gt;
&lt;p&gt;References&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/lasting-yang/frida-qbdi-tracer&#34;&gt;https://github.com/lasting-yang/frida-qbdi-tracer&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.quarkslab.com/why-are-frida-and-qbdi-a-great-blend-on-android.html&#34;&gt;https://blog.quarkslab.com/why-are-frida-and-qbdi-a-great-blend-on-android.html&lt;/a&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Code Restoration Trial (Part 2): Modified MD5</title>
      <link>https://578164.xyz/post/other/code-restoration-trial-part2modified-md5/</link>
      <pubDate>Mon, 13 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://578164.xyz/post/other/code-restoration-trial-part2modified-md5/</guid>
      
        <description>&lt;h2 id=&#34;1-objectives&#34;&gt;1. Objectives&lt;/h2&gt;
&lt;p&gt;Boss:  AI has already done the work of code restoration. Do we still need to write a tutorial for code restoration?&lt;/p&gt;
&lt;p&gt;Me: Of course I have to write it. AI is AI, it is a batch assembly line operation, how can it be as cool as my purely manual code? My code is warm.&lt;/p&gt;
&lt;p&gt;A famous person once said: You can never make money beyond your cognitive scope. So You can&amp;rsquo;t command AI to do work beyond your cognitive scope.&lt;/p&gt;
&lt;h2 id=&#34;2-steps&#34;&gt;2. Steps&lt;/h2&gt;
&lt;h4 id=&#34;2-conditional-breakpoints-3-data-printing&#34;&gt;2. Conditional breakpoints 3. Data printing&lt;/h4&gt;
&lt;p&gt;We want to know when the program runs to 0x1170 x4=0xdd89ca68To know the origin of the code, you need to start tracing from the previous code.&lt;/p&gt;
&lt;p&gt;I searched upwards and found a judgment at 0x1144, which means that several cycles have been passed before.&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;.text:0000000000001144 7F 01 08 EB                 CMP             X11, X8
.text:0000000000001148 88 CC FF 54                 B.HI            loc_AD8&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;For the convenience of analysis, I only want to trace the code for analysis in the last loop, so a conditional breakpoint is needed.&lt;/p&gt;
&lt;p&gt;Before making a conditional breakpoint, we print out the values of X11 and X8.&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;debugger.addBreakPoint(module.base + 0x1144, new BreakPointCallback() {
    @Override
    public boolean onHit(Emulator&amp;lt;?&amp;gt; emulator, long address) {
        Arm64RegisterContext ctx = emulator.getContext();
        int iX11 = ctx.getXInt(11);
        int iX8 = ctx.getXInt(8);;

        System.out.printf(&amp;#34;X11 = %d , X8 = %d\n&amp;#34;, iX11,iX8);

        return true;
    }
});&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Run a bit.&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;X11 = 64 , X8 = 64&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;It&amp;rsquo;s strange that it&amp;rsquo;s only printed once, which means this is not a loop, or it&amp;rsquo;s a false loop.&lt;/p&gt;
&lt;p&gt;Then keep looking upwards.&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;text:0000000000000C8C 8C 81 00 91                 ADD             X12, X12, #0x20 ; &amp;#39; &amp;#39;
.text:0000000000000C90             ; 156:       while ( v24 &amp;lt; 0x10 );
.text:0000000000000C90 03 FA FF 54                 B.CC            loc_BD0
.text:0000000000000C94 FE 17 50 29                 LDP             W30, W5, [SP,#0x110+var_90]
.text:0000000000000C98 11 03 19 4A                 EOR             W17, W24, W25&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;It seems that 0xC94 should be the location of the last calculation. (We can first set a breakpoint at 0xC94. If it is triggered only once, it means it is available. If it is triggered multiple times, it means it is in the loop body.)&lt;/p&gt;
&lt;h4 id=&#34;5-trace-code&#34;&gt;5. Trace code&lt;/h4&gt;
&lt;p&gt;There are two ways to run Unidbg Trace code. One is to write code directly to implement it and store the Trace result in traceCode1.log&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;try {
    emulator.traceCode(module.base+0xC94, module.base+0x1170).setRedirect(new PrintStream(new File(&amp;#34;traceCode1.log&amp;#34;)));
} catch (IOException e) {
    throw new IllegalStateException(e);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;The other is to enter the Trace command in the debug command line.&lt;/p&gt;
&lt;p&gt;First, set a breakpoint at 0xC94, enter the debugging window, enter the traceCode command and press Enter.&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;traceCode
Set trace LinuxModule{base=0x40000000, size=12288, name=&amp;#39;libnative-lib.so&amp;#39;} instructions success.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;If you want to save the trace results to a file, add the file name traceCode traceCode1.log&lt;/p&gt;
&lt;p&gt;Then the c command continues to execute and the Trace results appear.&lt;/p&gt;
&lt;h4 id=&#34;start-the-restoration-algorithm&#34;&gt;Start the restoration algorithm&lt;/h4&gt;
&lt;p&gt;Searching for 0xdd89ca68 in the Trace result, we found that it was flipped from 0x68ca89dd&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;0x40001154: &amp;#34;rev w4, w22&amp;#34; w22=0x68ca89dd =&amp;gt; w4=0xdd89ca68&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;If you encounter unfamiliar instructions here, you can naturally consult AI&lt;/p&gt;
&lt;p&gt;We first pick out the results related to 0x68ca89dd. The principle is to trace back from the results to the input parameters.&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;0x40001048: &amp;#34;add w12, w12, w15&amp;#34; w12=0x47448b48 w15=0x93f6f2bb =&amp;gt; w12=0xdb3b7e03

0x40001098: &amp;#34;orn w12, w12, w11&amp;#34; w12=0xdb3b7e03 w11=0x49ac16b =&amp;gt; w12=0xfb7f7e97
0x4000109c: &amp;#34;eor w12, w12, w16&amp;#34; w12=0xfb7f7e97 w16=0xa96ba62 =&amp;gt; w12=0xf1e9c4f5
0x400010a0: &amp;#34;add w12, w12, w15&amp;#34; w12=0xf1e9c4f5 w15=0x93f6f2bb =&amp;gt; w12=0x85e0b7b0
0x400010b0: &amp;#34;add w12, w12, w15&amp;#34; w12=0x85e0b7b0 w15=0x4212f2e5 =&amp;gt; w12=0xc7f3aa95

0x4000107c: &amp;#34;add w11, w11, w17&amp;#34; w11=0xffa26fc9 w17=0x2cc489bc =&amp;gt; w11=0x2c66f985
0x40001088: &amp;#34;add w11, w11, w17&amp;#34; w11=0x2c66f985 w17=0xf3d1564b =&amp;gt; w11=0x20384fd0
0x4000108c: &amp;#34;ror w11, w11, #0xb&amp;#34; w11=0x20384fd0 =&amp;gt; w11=0xfa040709

0x400010b4: &amp;#34;ror w12, w12, #0x1a&amp;#34; w12=0xc7f3aa95 =&amp;gt; w12=0xfceaa571
0x40001090: &amp;#34;add w11, w11, w16&amp;#34; w11=0xfa040709 w16=0xa96ba62 =&amp;gt; w11=0x49ac16b

0x400010b8: &amp;#34;add w12, w12, w11&amp;#34; w12=0xfceaa571 w11=0x49ac16b =&amp;gt; w12=0x18566dc

0x40001048: &amp;#34;add w12, w12, w15&amp;#34; w12=0x47448b48 w15=0x93f6f2bb =&amp;gt; w12=0xdb3b7e03

0x40001098: &amp;#34;orn w12, w12, w11&amp;#34; w12=0xdb3b7e03 w11=0x49ac16b =&amp;gt; w12=0xfb7f7e97
0x4000109c: &amp;#34;eor w12, w12, w16&amp;#34; w12=0xfb7f7e97 w16=0xa96ba62 =&amp;gt; w12=0xf1e9c4f5
0x400010a0: &amp;#34;add w12, w12, w15&amp;#34; w12=0xf1e9c4f5 w15=0x93f6f2bb =&amp;gt; w12=0x85e0b7b0
0x400010b0: &amp;#34;add w12, w12, w15&amp;#34; w12=0x85e0b7b0 w15=0x4212f2e5 =&amp;gt; w12=0xc7f3aa95

0x4000107c: &amp;#34;add w11, w11, w17&amp;#34; w11=0xffa26fc9 w17=0x2cc489bc =&amp;gt; w11=0x2c66f985
0x40001088: &amp;#34;add w11, w11, w17&amp;#34; w11=0x2c66f985 w17=0xf3d1564b =&amp;gt; w11=0x20384fd0
0x4000108c: &amp;#34;ror w11, w11, #0xb&amp;#34; w11=0x20384fd0 =&amp;gt; w11=0xfa040709

0x400010b4: &amp;#34;ror w12, w12, #0x1a&amp;#34; w12=0xc7f3aa95 =&amp;gt; w12=0xfceaa571
0x40001090: &amp;#34;add w11, w11, w16&amp;#34; w11=0xfa040709 w16=0xa96ba62 =&amp;gt; w11=0x49ac16b

0x400010b8: &amp;#34;add w12, w12, w11&amp;#34; w12=0xfceaa571 w11=0x49ac16b =&amp;gt; w12=0x18566dc

0x40001108: &amp;#34;add w22, w12, w22&amp;#34; w12=0x18566dc w22=0x67452301 =&amp;gt; w22=0x68ca89dd&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Then open VSCode and start writing code&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;int w12,w11,w15;

w12 = w12 | ~w11          // 0x40001098: &amp;#34;orn w12, w12, w11&amp;#34; w12=0xdb3b7e03 w11=0x49ac16b =&amp;gt; w12=0xfb7f7e97
w12 = w12 ^ w16                 // 0x4000109c: &amp;#34;eor w12, w12, w16&amp;#34; w12=0xfb7f7e97 w16=0xa96ba62 =&amp;gt; w12=0xf1e9c4f5

// w12 = (w12 | ~w11) ^ w16

w12 = w12 + w15                                // 0x400010a0: &amp;#34;add w12, w12, w15&amp;#34; w12=0xf1e9c4f5 w15=0x93f6f2bb =&amp;gt; w12=0x85e0b7b0
w12 = w12 + Num_w15        // 0x400010b0: &amp;#34;add w12, w12, w15&amp;#34; w12=0x85e0b7b0 w15=0x4212f2e5 =&amp;gt; w12=0xc7f3aa95
w12 = w12 &amp;gt;&amp;gt; 0x1a;        // 0x400010b4: &amp;#34;ror w12, w12, #0x1a&amp;#34; w12=0xc7f3aa95 =&amp;gt; w12=0xfceaa571
w12 = w12 + w11;                // 0x400010b8: &amp;#34;add w12, w12, w11&amp;#34; w12=0xfceaa571 w11=0x49ac16b =&amp;gt; w12=0x18566dc&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Yes, the restoration algorithm is so simple and boring.&lt;/p&gt;
&lt;p&gt;w12 = (w12 | ~w11) ^ w16 This formula makes us a little excited&lt;/p&gt;
&lt;p&gt;It is very similar to the I of the standard MD5 algorithm.&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#define F(x,y,z) ((x &amp;amp; y) | (~x &amp;amp; z))
#define G(x,y,z) ((x &amp;amp; z) | (y &amp;amp; ~z))
#define H(x,y,z) (x^y^z)
#define I(x,y,z) (y ^ (x | ~z))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;In this way, we may be able to restore it more easily within the framework of the standard MD5 algorithm and only find the modified parts.&lt;/p&gt;
&lt;h4 id=&#34;i-cant-help-but-use-ai&#34;&gt;I can&amp;rsquo;t help but use AI&lt;/h4&gt;
&lt;p&gt;Throw this boring process toCursorWhat will happen&lt;/p&gt;
&lt;p&gt;Use C language to restore the calculation process of w12 and add Chinese comments&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;0x40001048: &amp;#34;add w12, w12, w15&amp;#34; w12=0x47448b48 w15=0x93f6f2bb =&amp;gt; w12=0xdb3b7e03

0x40001098: &amp;#34;orn w12, w12, w11&amp;#34; w12=0xdb3b7e03 w11=0x49ac16b =&amp;gt; w12=0xfb7f7e97
0x4000109c: &amp;#34;eor w12, w12, w16&amp;#34; w12=0xfb7f7e97 w16=0xa96ba62 =&amp;gt; w12=0xf1e9c4f5
0x400010a0: &amp;#34;add w12, w12, w15&amp;#34; w12=0xf1e9c4f5 w15=0x93f6f2bb =&amp;gt; w12=0x85e0b7b0
0x400010b0: &amp;#34;add w12, w12, w15&amp;#34; w12=0x85e0b7b0 w15=0x4212f2e5 =&amp;gt; w12=0xc7f3aa95

0x4000107c: &amp;#34;add w11, w11, w17&amp;#34; w11=0xffa26fc9 w17=0x2cc489bc =&amp;gt; w11=0x2c66f985
0x40001088: &amp;#34;add w11, w11, w17&amp;#34; w11=0x2c66f985 w17=0xf3d1564b =&amp;gt; w11=0x20384fd0
0x4000108c: &amp;#34;ror w11, w11, #0xb&amp;#34; w11=0x20384fd0 =&amp;gt; w11=0xfa040709

0x400010b4: &amp;#34;ror w12, w12, #0x1a&amp;#34; w12=0xc7f3aa95 =&amp;gt; w12=0xfceaa571
0x40001090: &amp;#34;add w11, w11, w16&amp;#34; w11=0xfa040709 w16=0xa96ba62 =&amp;gt; w11=0x49ac16b

0x400010b8: &amp;#34;add w12, w12, w11&amp;#34; w12=0xfceaa571 w11=0x49ac16b =&amp;gt; w12=0x18566dc

#include &amp;lt;stdio.h&amp;gt;

int main() {
    unsigned int w12 = 0x47448b48;
    unsigned int w15 = 0x93f6f2bb;
    unsigned int w11 = 0xffa26fc9;
    unsigned int w17 = 0x2cc489bc;
    unsigned int w16 = 0xa96ba62;

    w12 = w12 + w15;
    printf(&amp;#34;w12 = %x\n&amp;#34;, w12);

    w12 = (w12 | ~w11);
    printf(&amp;#34;w12 = %x\n&amp;#34;, w12);

    w12 = w12 ^ w16;
    printf(&amp;#34;w12 = %x\n&amp;#34;, w12);

    w12 = w12 + w15;
    printf(&amp;#34;w12 = %x\n&amp;#34;, w12);

    w12 = w12 + 0x4212f2e5;
    printf(&amp;#34;w12 = %x\n&amp;#34;, w12);

    w11 = w11 + w17;
    printf(&amp;#34;w11 = %x\n&amp;#34;, w11);

    w11 = w11 + 0xf3d1564b;
    printf(&amp;#34;w11 = %x\n&amp;#34;, w11);

    w11 = (w11 &amp;gt;&amp;gt; 11) | (w11 &amp;lt;&amp;lt; (32 - 11));
    printf(&amp;#34;w11 = %x\n&amp;#34;, w11);

    w12 = (w12 &amp;gt;&amp;gt; 26) | (w12 &amp;lt;&amp;lt; (32 - 26));
    printf(&amp;#34;w12 = %x\n&amp;#34;, w12);

    w11 = w11 + w16;
    printf(&amp;#34;w11 = %x\n&amp;#34;, w11);

    w12 = w12 + w11;
    printf(&amp;#34;w12 = %x\n&amp;#34;, w12);

    return 0;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;I think it&amp;rsquo;s better than what I wrote. Programmers are going to evolve into a new breed, that is, to write for AI.prompt&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I used to think being a leader was a blessing. I didn’t have to do any work and could just direct my subordinates to do their work.&lt;/p&gt;
&lt;p&gt;Later, when I really became a leader, I realized that I had to know language A to Z, otherwise the guy who worked on PHP said that this thing could not be implemented, and the guy who worked on Flash said that this function would take a month to complete.&lt;/p&gt;
&lt;p&gt;The same goes for AI. It can do mechanical and repetitive tasks better than you, but you still have to do the creative and guiding work yourself.&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Android high version installation system certificate HTTPS packet capture - the ultimate solution</title>
      <link>https://578164.xyz/post/other/android-high-version-installation-system-certificate-https-packet-capture-the-ultimate-solution/</link>
      <pubDate>Sun, 05 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://578164.xyz/post/other/android-high-version-installation-system-certificate-https-packet-capture-the-ultimate-solution/</guid>
      
        <description>&lt;h2 id=&#34;1-objectives&#34;&gt;1. Objectives&lt;/h2&gt;
&lt;p&gt;To capture App packages, you first need the App to trust the certificate of the capture software.&lt;/p&gt;
&lt;p&gt;However, starting from Android 7.0, the system no longer trusts user CA certificates, so you need to install the CA certificate to the system CA certificate directory.&lt;/p&gt;
&lt;p&gt;If you use Magisk jailbreak, this task is relatively simple. You only need to install a module Move Certificates.&lt;/p&gt;
&lt;p&gt;But today&amp;rsquo;s story starts with me flashing a new ROM. This ROM is quite strange. After flashing, the adb connection is directly in root state, but the App cannot obtain the root state.&lt;/p&gt;
&lt;p&gt;Oh my god, didn’t I accidentally flash a hidden root ROM? Now I can’t bear to install Magisk.&lt;/p&gt;
&lt;p&gt;Now the question isHow to install the certificate to the system directory?&lt;/p&gt;
&lt;h2 id=&#34;2-steps&#34;&gt;2. Steps&lt;/h2&gt;
&lt;h3 id=&#34;forced-sex&#34;&gt;Forced sex&lt;/h3&gt;
&lt;p&gt;Calculate the certificate name&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;openssl x509 -subject_hash_old -in charles-ssl-proxying-certificate_saved.pem&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Calculate the value, such as 3a1074b3&lt;/p&gt;
&lt;p&gt;Then rename the original Charles certificate charles-ssl-proxying-certificate_saved.pem to3a1074b3.0&lt;/p&gt;
&lt;p&gt;Finally3a1074b3.0Copy the file to the /system/etc/security/cacerts/ directory.&lt;/p&gt;
&lt;p&gt;Done~~&lt;/p&gt;
&lt;p&gt;Ideals are full, but reality is skinny. /system is probably not writable, even if you have root privileges, you cannot write into it.&lt;/p&gt;
&lt;p&gt;I asked Google, and he said that I could remount /system as readable and writable, but I didn&amp;rsquo;t succeed.&lt;/p&gt;
&lt;p&gt;There are two ways that have been successful before.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Install RootExplorer.apk and mount /system as readable and writable.&lt;/li&gt;
&lt;li&gt;adb reboot recovery to enter the previously flashedtwrp, write to /system in twrp&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;But this time it crashed, RootExplorer could not load and read. After twrp finished writing /system, the rom went crazy, the settings could not be entered, and the old newspaper crashed.&lt;/p&gt;
&lt;h3 id=&#34;learn&#34;&gt;Learn&lt;/h3&gt;
&lt;p&gt;I remembered the packet capture software Http Toolkit, which has an Android Device via ADB mode, which can capture packets smoothly.&lt;/p&gt;
&lt;p&gt;This means that it can use ADB to write the certificate to /system. After all, my ADB has root permissions.&lt;/p&gt;
&lt;p&gt;It’s amazing, how is it possible?&lt;/p&gt;
&lt;p&gt;This started a long journey to Google again, and finally I found an article on their official website that described in detailThrough adb with root privilegesA magical solution to write system certificates.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Push the HTTP Toolkit CA certificate to the device via ADB.&lt;/li&gt;
&lt;li&gt;Copy all system certificates from /system/etc/security/cacerts/ to a temporary directory.&lt;/li&gt;
&lt;li&gt;Mount a tmpfs ram filesystem on /system/etc/security/cacerts/. This effectively places a new, empty, writable filesystem on a small portion of /system. Move the copied system certificates back to that mount point.&lt;/li&gt;
&lt;li&gt;Move the HTTP Toolkit CA certificate to the mount point as well.&lt;/li&gt;
&lt;li&gt;Update the permissions of all files in the temporary mount point to 644, and set the SELinux label of the system file to system_file to make it look like a legitimate Android system file.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The key point is to mount a memory file system, which is very talented.&lt;/p&gt;
&lt;p&gt;Show me the Code&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# htk-inject-system-cert.sh
set -e # Fail on error
# Create a separate temp directory, to hold the current certificates
# Without this, when we add the mount we can&amp;#39;t read the current certs anymore.
mkdir -m 700 /data/local/tmp/htk-ca-copy
# Copy out the existing certificates
cp /system/etc/security/cacerts/* /data/local/tmp/htk-ca-copy/
# Create the in-memory mount on top of the system certs folder
mount -t tmpfs tmpfs /system/etc/security/cacerts
# Copy the existing certs back into the tmpfs mount, so we keep trusting them
mv /data/local/tmp/htk-ca-copy/* /system/etc/security/cacerts/
# Copy our new cert in, so we trust that too
cp /data/local/tmp/c88f7ed0.0 /system/etc/security/cacerts/
# Update the perms &amp;amp; selinux context labels, so everything is as readable as before
chown root:root /system/etc/security/cacerts/*
chmod 644 /system/etc/security/cacerts/*
chcon u:object_r:system_file:s0 /system/etc/security/cacerts/*
# Delete the temp cert directory &amp;amp; this script itself
rm -r /data/local/tmp/htk-ca-copy
# rm ${injectionScriptPath}
echo &amp;#34;System cert successfully injected&amp;#34;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;As for the memory file system, it will definitely become invalid after reboot, so it is not very troublesome to save it as a script and run it before capturing the packet.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Sometimes the magical technology is just a layer of window paper. Once you break it, you will be amazed at how simple it is.&lt;/p&gt;
&lt;p&gt;Once you have mastered a new solution, you can apply it to other situations in the future.&lt;/p&gt;
&lt;p&gt;Reference &lt;a href=&#34;https://httptoolkit.com/blog/intercepting-android-https/&#34;&gt;https://httptoolkit.com/blog/intercepting-android-https/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/httptoolkit/httptoolkit-server/blob/8a4b4d283fbe98694ddd09a44d6e9c9941aa91e2/src/interceptors/android/adb-commands.ts&#34;&gt;https://github.com/httptoolkit/httptoolkit-server/blob/8a4b4d283fbe98694ddd09a44d6e9c9941aa91e2/src/interceptors/android/adb-commands.ts&lt;/a&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Code Restoration Trial (I): Modified MD5</title>
      <link>https://578164.xyz/post/other/code-restoration-trial-imodified-md5/</link>
      <pubDate>Wed, 22 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://578164.xyz/post/other/code-restoration-trial-imodified-md5/</guid>
      
        <description>&lt;h2 id=&#34;1-objectives&#34;&gt;1. Objectives&lt;/h2&gt;
&lt;p&gt;It’s 2023, and MD5 is already the most basic signature algorithm, but if you still only do a simple MD5 on the input, you will definitely be laughed at by your peers. Adding salt is a basic improvement, but in this era of severe employment, just adding salt is definitely not enough.&lt;/p&gt;
&lt;p&gt;Today we will talk about the modified MD5 to make this algorithm more advanced.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Vegetable rolls&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The simplest way to modify it is to change the initial parameters of MD5.&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;     context-&amp;gt;state[0] = 0x67452301;
     context-&amp;gt;state[1] = 0xEFCDAB89;
     context-&amp;gt;state[2] = 0x98BADCFE;
     context-&amp;gt;state[3] = 0x10325476;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Just modify these four parameters. By modifying these parameters, we can change the result of MD5 calculation. But this method is too simple and cannot be rolled up.&lt;/p&gt;
&lt;p&gt;Next, we will introduce more advanced curling methods.&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Meat roll&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;md5 will perform 64 rounds of operations, each of which uses a constant to form a constant table K.&lt;/p&gt;
&lt;p&gt;The original value of K is calculated as 2^32 * |sin i |, and then the integer part is taken.&lt;/p&gt;
&lt;p&gt;Then ideal students can change the K value, for example, change sin to cos or tan, so that it can be rolled up.&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Volume within volume&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#define F(x,y,z) ((x &amp;amp; y) | (~x &amp;amp; z))
#define G(x,y,z) ((x &amp;amp; z) | (y &amp;amp; ~z))
#define H(x,y,z) (x^y^z)
#define I(x,y,z) (y ^ (x | ~z))

#define ROTATE_LEFT(x,n) ((x &amp;lt;&amp;lt; n) | (x &amp;gt;&amp;gt; (32-n)))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;To really roll it up, we need to change the four nonlinear transformation functions F, G, H, and I in MD5. We can addXORor reduceandThis advanced method can fool the boss and make the algorithm look advanced.&lt;/p&gt;
&lt;p&gt;Our goal today is to try to restore a modified MD5 algorithm and understand the basic methods of algorithm restoration through this practice.&lt;/p&gt;
&lt;p&gt;In this sample, our input parameter is a string: &amp;ldquo;1677038066553&amp;rdquo;&lt;/p&gt;
&lt;p&gt;The return value is 32 characters: &amp;ldquo;DD89CA684D91818B970710F75A75743D&amp;rdquo;&lt;/p&gt;
&lt;h2 id=&#34;2-steps&#34;&gt;2. Steps&lt;/h2&gt;
&lt;h3 id=&#34;first-step&#34;&gt;first step&lt;/h3&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;We need to use Unidbg to run the algorithm. Compared with our predecessors who used ida to debug in ancient times, the emergence of Unidbg directly reduced the difficulty of restoring the algorithm by an order of magnitude.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&#34;step-2&#34;&gt;Step 2&lt;/h3&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;We need to reverse the result Z step by step back to the original input A. This method is called reversing the cause and effect, which is a basic routine of reverse analysis.
Assuming that this sample is MD5 or a modified MD5, we can use the following methods to restore the algorithm:
1. Debug breakpoints
2. Conditional breakpoints
3. Data printing
4. Trace memory reading and writing
5. Trace code&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h4 id=&#34;1-debug-breakpoints&#34;&gt;1. Debug breakpoints&lt;/h4&gt;
&lt;p&gt;Reverse analysis is an empirical science. Although there are some basic routines, it is still based on trial and error. First, use IDA to open libnative-lib.so and find the exported function from the Exports export table.Java_com_littleq_cryptography_md5_MainActivity_sign&lt;/p&gt;
&lt;p&gt;The start address of this function is 0x1234, and the end address is 0x12B4, but the main code logic is in the function sub_A3C. Let&amp;rsquo;s try setting a breakpoint at the end of the sub_A3C function.&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;text:00000000000011D4 E0 07 40 F9                 LDR             X0, [SP,#0x110+var_108]
.text:00000000000011D8 03 00 00 90+                ADRL            X3, aSSSS ; &amp;#34;%s%s%s%s&amp;#34;
.text:00000000000011D8 63 EC 0A 91
.text:00000000000011E0 E4 83 01 91                 ADD             X4, SP, #0x110+var_B0
.text:00000000000011E4 E5 43 01 91                 ADD             X5, SP, #0x110+var_C0
.text:00000000000011E8 E6 03 01 91                 ADD             X6, SP, #0x110+var_D0
.text:00000000000011EC E7 C3 00 91                 ADD             X7, SP, #0x110+var_E0
.text:00000000000011F0 01 00 80 92                 MOV             X1, #0xFFFFFFFFFFFFFFFF
.text:00000000000011F4 02 08 80 52                 MOV             W2, #0x40 ; &amp;#39;@&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;This 0x11D8 looks like a format string.&lt;/p&gt;
&lt;p&gt;We set a breakpoint at 0x11D8 in Unidbg&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;    Debugger debugger = emulator.attach();
    debugger.addBreakPoint(module.base + 0x11D8);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Run it and it will break smoothly.&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;debugger break at: 0x400011d8 @ Function64 address=0x40001234, arguments=[unidbg@0xfffe1640[libandroid.so]0x640, 1853170425, 2008362258]
&amp;gt;&amp;gt;&amp;gt; x0=0xbffff690(-1073744240) x1=0x0 x2=0x4 x3=0xbfffed20 x4=0x40230200 x5=0x402302c0 x6=0x1 x7=0xbffff708 x8=0x0 x9=0x0 x10=0x1 x11=0x0 x12=0x8 x13=0x8 x14=0x8
&amp;gt;&amp;gt;&amp;gt; x15=0x8 x16=0x40228d70 x17=0x40177ddc x18=0x8 x19=0x4cf3a208 x20=0x400012b8 x21=0x0 x22=0x68ca89dd x23=0x3d74755a x24=0x72e737bb x25=0xddf5ac1 x26=0xd0d5adc6 x27=0x8b81914d x28=0xf7100797 fp=0xbffff680
LR=RX@0x400011d4[libnative-lib.so]0x11d4
SP=0xbffff570
PC=RX@0x400011d8[libnative-lib.so]0x11d8
nzcv: N=0, Z=1, C=1, V=0, EL0, use SP_EL0
start + 0xae8
=&amp;gt; *[libnative-lib.so*0x011d8]*[03000090]*0x400011d8:*&amp;#34;adrp x3, #0x40001000&amp;#34;
    [libnative-lib.so 0x011dc] [63ec0a91] 0x400011dc: &amp;#34;add x3, x3, #0x2bb&amp;#34;
    [libnative-lib.so 0x011e0] [e4830191] 0x400011e0: &amp;#34;add x4, sp, #0x60&amp;#34;
    [libnative-lib.so 0x011e4] [e5430191] 0x400011e4: &amp;#34;add x5, sp, #0x50&amp;#34;
    [libnative-lib.so 0x011e8] [e6030191] 0x400011e8: &amp;#34;add x6, sp, #0x40&amp;#34;
    [libnative-lib.so 0x011ec] [e7c30091] 0x400011ec: &amp;#34;add x7, sp, #0x30&amp;#34;
    [libnative-lib.so 0x011f0] [01008092] 0x400011f0: &amp;#34;mov x1, #-1&amp;#34;
    [libnative-lib.so 0x011f4] [02088052] 0x400011f4: &amp;#34;mov w2, #0x40&amp;#34;
    [libnative-lib.so 0x011f8] [5bfdff97] 0x400011f8: &amp;#34;bl #0x40000764&amp;#34;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;In Arm assembly, before calling a function, the input parameters are stored in x0, x1, x2 ……&lt;/p&gt;
&lt;p&gt;From this code, we can see that the address 0x400011f8 will call the 0x40000764 function and pass in 7 parameters, from x0 to x7.&lt;/p&gt;
&lt;p&gt;Although Unidbg&amp;rsquo;s debugging is a bit crude, it is sufficient. With such a magical tool in hand, what else do you want?&lt;/p&gt;
&lt;p&gt;The debugging commands should first be mastered as follows:&lt;/p&gt;
&lt;p&gt;s single step into, that is, it will enter when encountering a function call.&lt;/p&gt;
&lt;p&gt;n Single stepping, will not enter the function when encountering a function call.&lt;/p&gt;
&lt;p&gt;c Continue execution&lt;/p&gt;
&lt;p&gt;b Breakpoint&lt;/p&gt;
&lt;p&gt;r cancel the current breakpoint&lt;/p&gt;
&lt;p&gt;m View memory&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s sss a few times and single-step to 0x400011f8&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;debugger break at: 0x400011f8 @ Function64 address=0x40001234, arguments=[unidbg@0xfffe1640[libandroid.so]0x640, 1853170425, 2008362258]
&amp;gt;&amp;gt;&amp;gt; x0=0xbffff690(-1073744240) x1=0xffffffffffffffff x2=0x40 x3=0x400012bb x4=0xbffff5d0 x5=0xbffff5c0 x6=0xbffff5b0 x7=0xbffff5a0 x8=0x0 x9=0x0 x10=0x1 x11=0x0 x12=0x8 x13=0x8 x14=0x8
LR=RX@0x400011d4[libnative-lib.so]0x11d4
SP=0xbffff570
PC=RX@0x400011f8[libnative-lib.so]0x11f8
nzcv: N=0, Z=1, C=1, V=0, EL0, use SP_EL0
start + 0xb08
=&amp;gt; *[libnative-lib.so*0x011f8]*[5bfdff97]*0x400011f8:*&amp;#34;bl #0x40000764&amp;#34;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;At this point, the input parameters are ready. Let&amp;rsquo;s look at them one by one.&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;mx7

&amp;gt;-----------------------------------------------------------------------------&amp;lt;
[10:40:26 646]x7=unidbg@0xbffff5a0, md5=d6c164ca9ef531557fc14e1bf7173663,
size: 112
0000: 35 41 37 35 37 34 33 44 00 B3 22 40 00 00 00 00    5A75743D..&amp;#34;@....
0010: 39 37 30 37 31 30 46 37 00 8D 09 40 00 00 00 00    970710F7...@....
0020: 34 44 39 31 38 31 38 42 00 77 12 40 02 00 00 00    4D91818B.w.@....
0030: 44 44 38 39 43 41 36 38 00 1B 17 40 02 00 00 00    DD89CA68...@....
0040: 31 36 37 37 30 33 38 30 36 36 35 35 33 80 00 00    1677038066553...
0050: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
0060: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00    ................
^-----------------------------------------------------------------------------^&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;You can see that this time the function 0x40000764 is called, which is basically assembling the final result.&lt;/p&gt;
&lt;p&gt;What we need to do is to find the locations where these results are generated to analyze how the final result is calculated, that is, the process of Y → Z.&lt;/p&gt;
&lt;h4 id=&#34;4-trace-memory-reading-and-writing&#34;&gt;4. Trace memory reading and writing&lt;/h4&gt;
&lt;p&gt;Now that we know the location of the result Z, the next step is to know who calculated Z.&lt;/p&gt;
&lt;p&gt;This requires the use of a powerful function of Unidbg: memory read and write monitoring&lt;/p&gt;
&lt;p&gt;This time we set the debug breakpoint earlier, at the beginning of the sub_A3C function.&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;debugger break at: 0x40000a3c @ Function64 address=0x40001234, arguments=[unidbg@0xfffe1640[libandroid.so]0x640, 1853170425, 2008362258]
&amp;gt;&amp;gt;&amp;gt; x0=0x40004000 x1=0xbffff690 x2=0x0 x3=0x1 x4=0x0 x5=0x1 x6=0x0 x7=0x0 x8=0xfffe0a70 x9=0x3002 x10=0x0 x11=0x1 x12=0x3 x13=0x40003018 x14=0x40003028
&amp;gt;&amp;gt;&amp;gt; x15=0x1 x16=0x40228910 x17=0x0 x18=0x17 x19=0xfffe1640 x20=0xbffff708 x21=0x0 x22=0x0 x23=0x0 x24=0x0 x25=0x0 x26=0x0 x27=0x0 x28=0x0 fp=0xbffff6f0
LR=RX@0x40001280[libnative-lib.so]0x1280
SP=0xbffff690
PC=RX@0x40000a3c[libnative-lib.so]0xa3c
nzcv: N=0, Z=0, C=1, V=0, EL0, use SP_EL0
start + 0x34c
=&amp;gt; *[libnative-lib.so*0x00a3c]*[ff8304d1]*0x40000a3c:*&amp;#34;sub sp, sp, #0x120&amp;#34;

traceWrite 0xbffff5d0 0xbffff5d8
Set trace 0xbffff5d0-&amp;gt;0xbffff5d8 memory write success.
c
[11:41:41 656] Memory WRITE at 0xbffff5d8, data size = 1, data value = 0x0, PC=RX@0x40001168[libnative-lib.so]0x1168, LR=null
[11:41:41 657] Memory WRITE at 0xbffff5d0, data size = 8, data value = 0x0, PC=RX@0x4000116c[libnative-lib.so]0x116c, LR=null
[11:41:41 661] Memory WRITE at 0xbffff5d8, data size = 1, data value = 0x0, PC=RX@0x401b48cc[libc.so]0x648cc, LR=RX@0x401b48c8[libc.so]0x648c8&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;traceWrite is to monitor the memory write command.&lt;/p&gt;
&lt;p&gt;It looks like the memory at 0xbffff5d0 is writtenDD89CA68The location of the data is: 0x116c&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;text:000000000000114C 14 00 00 90+                ADRL            X20, unk_12B8
.text:000000000000114C 94 E2 0A 91
.text:0000000000001154 C4 0A C0 5A                 REV             W4, W22
.text:0000000000001158 E0 83 01 91                 ADD             X0, SP, #0x110+var_B0
.text:000000000000115C 21 01 80 52                 MOV             W1, #9
.text:0000000000001160 22 01 80 52                 MOV             W2, #9
.text:0000000000001164 E3 03 14 AA                 MOV             X3, X20
.text:0000000000001168 FF A3 01 39                 STRB            WZR, [SP,#0x110+var_A8]
.text:000000000000116C FF 33 00 F9                 STR             XZR, [SP,#0x110+var_B0]
.text:0000000000001170 7D FD FF 97                 BL              sub_764&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;The instruction STR XZR at 0x116c is a write operation, but it does not look like writing data. SP,#0x110+var_B0The data at this address is cleared to zero.&lt;/p&gt;
&lt;p&gt;Then let&amp;rsquo;s start over again. (The advantage of Unidbg is that it can be replayed infinitely, which is many times more convenient than debugging the App on a real machine.)&lt;/p&gt;
&lt;p&gt;This time go a little further and set a breakpoint at 0x114C.&lt;/p&gt;
&lt;p&gt;After breaking down, after single-stepping once every s, check m0xbffff5d0.&lt;/p&gt;
&lt;p&gt;Finally, it was found that after running 0x1170, the value of the memory at 0xbffff5d0 changed to,DD89CA68This means that 0xbffff5d0 is written by sub_764 function.&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;debugger break at: 0x40001170 @ Function64 address=0x40001234, arguments=[unidbg@0xfffe1640[libandroid.so]0x640, 1853170425, 2008362258]
&amp;gt;&amp;gt;&amp;gt; x0=0xbffff5d0(-1073744432) x1=0x9 x2=0x9 x3=0x400012b8 x4=0xdd89ca68 x5=0xe6cd8e62 x6=0x24523012 x7=0x29b9c389 x8=0x40 x9=0x40318041 x10=0xbffff5e0 x11=0x40 x12=0x3d5ebb2b x13=0x6450c165 x14=0xfc63b7e7
&amp;gt;&amp;gt;&amp;gt; x15=0x49ac16b x16=0xac6af723 x17=0xf3d1564b x18=0x18 x19=0x4cf3a208 x20=0x400012b8 x21=0x0 x22=0x68ca89dd x23=0x3d74755a x24=0x72e737bb x25=0xddf5ac1 x26=0xd0d5adc6 x27=0x8b81914d x28=0xf7100797 fp=0xbffff680
LR=null
SP=0xbffff570
PC=RX@0x40001170[libnative-lib.so]0x1170
nzcv: N=0, Z=1, C=1, V=0, EL0, use SP_EL0
start + 0xa80
=&amp;gt; *[libnative-lib.so*0x01170]*[7dfdff97]*0x40001170:*&amp;#34;bl #0x40000764&amp;#34;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;But back to 0x1170, we found a familiar string of numbersx4=0xdd89ca68, Okay, our question becomes how is the value of x4 calculated?&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Compile and flash Android 10 source code (QP1A.190711.020) under Mac 10.14.x (Pixel 2 XL)</title>
      <link>https://578164.xyz/post/other/compile-and-flash-android-10-source-codeqp1a.190711.020under-mac-10.14.xpixel2xl/</link>
      <pubDate>Mon, 12 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://578164.xyz/post/other/compile-and-flash-android-10-source-codeqp1a.190711.020under-mac-10.14.xpixel2xl/</guid>
      
        <description>&lt;h2 id=&#34;1-objectives&#34;&gt;1. Objectives&lt;/h2&gt;
&lt;p&gt;Older generations of Windows reverse engineers have been analyzing the Windows kernel one after another, dreaming of taking a look at the Windows source code, but so far they can only see leaked source code from several generations ago. The mobile era is a blessing, the latest version of Android source code is open to you, and you can&amp;rsquo;t just look at it, you have to touch it.&lt;/p&gt;
&lt;p&gt;Now will tell you in detail the process of downloading source code, compiling and flashing the machine over the past week.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Mac 10.14.6&lt;/li&gt;
&lt;li&gt;jdk 1.8.0_101&lt;/li&gt;
&lt;li&gt;xcode 11.3.1 (11C504)&lt;/li&gt;
&lt;li&gt;Android 10.0 r2 (QP1A.190711.020)&lt;/li&gt;
&lt;li&gt;Pixel 2 XL&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-analysis&#34;&gt;2. Analysis&lt;/h2&gt;
&lt;p&gt;It is said that in Aolai Country in Dongsheng Shenzhou, there is a thing called a shell, which wraps the App tightly, so you can&amp;rsquo;t even take a look at it, let alone touch it.&lt;/p&gt;
&lt;p&gt;But the Android Heart Sutra came, and every move of the shell is running on Android. So if we study the Android Heart Sutra carefully, we may be able to take a look at it, or even touch it.&lt;/p&gt;
&lt;h3 id=&#34;download-source-code&#34;&gt;Download source code&lt;/h3&gt;
&lt;p&gt;The Android Heart Sutra I studied this time is not the latest one&lt;/p&gt;
&lt;h3 id=&#34;prepare-hard-disk-space-about-200g&#34;&gt;Prepare hard disk space, about 200G&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Recommended solution: &lt;strong&gt;Buy a 2T mobile hard drive and format it as Mac OS Extended (case-sensitive, journaled)&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Not recommended: Free up 200G of space for your beloved Xiaobai&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;1. Create a case-sensitive disk image&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ sudo hdiutil create -type SPARSE -fs &amp;#39;Case-sensitive Journaled HFS+&amp;#39; -size 200g ~/android.dmg
2. Load it
$ sudo hdiutil attach ~/android.dmg.sparseimage -mountpoint /Volumes/android&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;By default, only 1024 files can be opened at the same time on Mac systems. This limit may be exceeded when compiling Android source code, so this limit needs to be lifted. Add the following content to ~/.bash_profile, and the command will take effect immediately: source ~/.bash_profile&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;        ulimit -S -n 1024&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Then put aosp1000r2.7z Unzip to the aosp directory on the hard disk&lt;/p&gt;
&lt;h3 id=&#34;download-the-corresponding-mac-sdk-my-version-is-1014&#34;&gt;Download the corresponding Mac SDK. My version is 10.14.&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/phracker/MacOSX-SDKs/releases&#34;&gt;https://github.com/phracker/MacOSX-SDKs/releases&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Unzip to /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;xz -d MacOSX10.14.sdk.tar.xz
tar xvf MacOSX10.14.sdk.tar&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&#34;download-the-two-drivers-of-pixel-2xl-to-the-root-directory-of-aosp-source-code-and-unzip-them&#34;&gt;Download the two drivers of Pixel 2XL to the root directory of aosp source code and unzip them&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://developers.google.com/android/drivers#taimenqp1a.190711.020&#34;&gt;https://developers.google.com/android/drivers&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Download two files&lt;/p&gt;
&lt;p&gt;google_devices-taimen-qp1a.190711.020-baa894dd.tgz&lt;/p&gt;
&lt;p&gt;qcom-taimen-qp1a.190711.020-1d440636.tgz&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;tar zxvf FileName.tgz&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Unzip toaospDirectory, and then execute the decompressed file xx.sh. The generated files are under the vendor directory.&lt;/p&gt;
&lt;h3 id=&#34;start-compiling&#34;&gt;Start Compiling&lt;/h3&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cd aosp
source build/envsetup.sh
lunch  aosp_taimen-userdebug
make -j16   &lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&#34;after-several-hours-the-image-file-will-eventually-be-generated-in-the-aospouttargetproducttaimen-directory&#34;&gt;After several hours, the image file will eventually be generated in the aosp/out/target/product/taimen directory:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;system.img: system image&lt;/li&gt;
&lt;li&gt;ramdisk.img: root file system image&lt;/li&gt;
&lt;li&gt;userdata.img: User data image&lt;/li&gt;
&lt;li&gt;recovery.img: recovery image&lt;/li&gt;
&lt;li&gt;boot.img: boot image&lt;/li&gt;
&lt;li&gt;vendor.img: driver image&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;great-start-flashing&#34;&gt;Great, start flashing&lt;/h3&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;adb reboot bootloader   
fastboot flashall -w         &lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Perfectly done, done&amp;hellip;&lt;/p&gt;
&lt;h3 id=&#34;a-sad-story&#34;&gt;A sad story&lt;/h3&gt;
&lt;p&gt;I can&amp;rsquo;t connect to wifi and can&amp;rsquo;t access the internet. I asked Google and they said the problem was that the persist partition was damaged and I just needed to format it.&lt;/p&gt;
&lt;p&gt;I don&amp;rsquo;t believe him. I downloaded the QP1A.190711.020 factory package of Pixel 2 XL from &lt;a href=&#34;https://developers.google.com/android/images&#34;&gt;https://developers.google.com/android/images and found that there was a &lt;/a&gt;&lt;strong&gt;radio-taimen-g8998-00012-1905270706.img&lt;/strong&gt; in it , which was not in the code we compiled.&lt;/p&gt;
&lt;p&gt;Radio is the communication baseband file. I flashed the factory package first, and then flashed the version we compiled. This time I was able to access the Internet successfully.&lt;/p&gt;
&lt;p&gt;I think the problem can be solved by simply flashing the baseband file. Friends who are interested can try it.&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;fastboot flash radio radio-taimen-g8998-00012-1905270706.img&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&#34;pitfalls&#34;&gt;Pitfalls&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Compile error&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;FAIL: TestGlobEscapes //* (0.00s) glob_test.go:562: incorrect matches list: glob_test.go&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Comment out the lines of &lt;strong&gt;glob_test.go&lt;/strong&gt; and &lt;strong&gt;fs_test.go&lt;/strong&gt; in the aosp/build/blueprint/Blueprints file&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Install the xcode command line&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;xcode-select &amp;ndash;install&lt;/p&gt;
&lt;h2 id=&#34;summarize&#34;&gt;Summarize&lt;/h2&gt;
&lt;p&gt;The Android source code is already very easy to configure. The compilation on Ubuntu and Mac is very smooth. The only problem is flashing the firmware. Many online tutorials do not explain the flashing steps in detail. The idea provided is to compare it with the official factory package and make up for what is missing.&lt;/p&gt;
&lt;p&gt;Scientific Internet access is a prerequisite for studying Android. (￣▽￣)ゞ&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Analysis of the sig3 signature of a novel app</title>
      <link>https://578164.xyz/post/other/analysis-of-the-sig3-signature-of-a-novel-app/</link>
      <pubDate>Mon, 10 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://578164.xyz/post/other/analysis-of-the-sig3-signature-of-a-novel-app/</guid>
      
        <description>&lt;h2 id=&#34;1-objectives&#34;&gt;1. Objectives&lt;/h2&gt;
&lt;p&gt;This sample is somewhat similar to the previous short video app. The signature name and algorithm are probably the same. So if you understand this, you can probably understand the latest version of the short video app.&lt;/p&gt;
&lt;p&gt;So what is the difference between reading novels and watching short videos?&lt;/p&gt;
&lt;p&gt;The more I read novels, the sleepier I feel. The more I watch short videos, the more awake I feel. This proves that AI knows you better than you know yourself.&lt;/p&gt;
&lt;p&gt;Today our goal is a novel App v1.0.0.2&lt;/p&gt;
&lt;h2 id=&#34;2-steps&#34;&gt;2. Steps&lt;/h2&gt;
&lt;p&gt;1:Search for __sig3&lt;/p&gt;
&lt;p&gt;There are only 5 results. After careful searching, I found this atlasSign function.&lt;/p&gt;
&lt;p&gt;Searching for the atlasSign function again, although the place of the call is correct this time, we found an old friend at a glance&lt;/p&gt;
&lt;p&gt;com.kxxxxxou.android.security.KSecurity&lt;/p&gt;
&lt;p&gt;First of all, its name is very unique. Secondly, it was also his signature when I analyzed the short video app last time.&lt;/p&gt;
&lt;h3 id=&#34;hook-atlassign&#34;&gt;Hook atlasSign&lt;/h3&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;var KSecurityCls = Java.use(&amp;#34;com.kxxxxxou.android.security.KSecurity&amp;#34;);
KSecurityCls.atlasSign.implementation = function(a){
    var rc = this.atlasSign(a);
    console.log(TAG + &amp;#34;atlasSign a = &amp;#34; + a);
    console.log(TAG + &amp;#34;atlasSign &amp;gt;&amp;gt;&amp;gt; rc = &amp;#34; + rc);
    return rc;

}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;After running it, the result is there, but the hook outputs 48 bits of data, not the 70-plus bytes of messy data we captured.&lt;/p&gt;
&lt;p&gt;There are two options:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We firmly believe that we are right. To make the __sig3 signature, atlasSign must be called. It is just possible that the 48-bit signature is changed in some way. In this case, we just need to print the stack;&lt;/li&gt;
&lt;li&gt;The result of the captured packet still looks very much like Base64. Although there is no required Base64 feature such as ==, based on the experience of so many issues, you can still try to hook Base64.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;stack&#34;&gt;Stack&lt;/h3&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;h1yxxs: java.lang.Thread.getStackTrace(Thread.java:1720)
h1yxxs: com.kxxxxxou.android.security.KSecurity.atlasSign(Native Method)
h1yxxs: k.w.e.a1.t.a(SourceFile:34)
h1yxxs: k.w.e.a1.t.a(Native Method)
h1yxxs: k.h.d.h.d.intercept(SourceFile:111)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;The fox&amp;rsquo;s tail is out, this kwea1.ta should be our target&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;var ffSignCls =  Java.use(&amp;#34;k.w.e.a1.t&amp;#34;);
ffSignCls.a.overload(&amp;#39;java.lang.String&amp;#39;, &amp;#39;java.lang.String&amp;#39;, &amp;#39;java.util.Map&amp;#39;).implementation = function(a,b,c){
    var rc = this.a(a,b,c);
    console.log(TAG + &amp;#34;a = &amp;#34; + a);
    console.log(TAG + &amp;#34;b = &amp;#34; + b);
    console.log(TAG + &amp;#34;c = &amp;#34; + c.entrySet().toArray());
    console.log(TAG + &amp;#34;&amp;gt;&amp;gt;&amp;gt; rc = &amp;#34; + rc);

    return rc;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Run it again, and the result is __sig3.&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;h1yxksxs: &amp;gt;&amp;gt;&amp;gt; rc = VVftYQGnh_1jN2Q2ODU4NTVjN2U0NmU1ZGM4ZjhjOGQwYjA0MDA5OGMyNDhkN2Y2OTM5ZTkwODY&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;After some analysis, it turns out that he just made a Base64 of the result of atlasSign and replaced all the obvious + / =.&lt;/p&gt;
&lt;p&gt;There is also a dpbs in the input parameter that is encrypted, but this is easier to solve and is in the kwea1.ta class.&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>An analysis of the encryption of the communication protocol of a car networking app (Part 2) Unidbg step by step</title>
      <link>https://578164.xyz/post/other/an-analysis-of-the-encryption-of-the-communication-protocol-of-a-car-networking-apppart-2unidbg-step-by-step/</link>
      <pubDate>Thu, 08 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://578164.xyz/post/other/an-analysis-of-the-encryption-of-the-communication-protocol-of-a-car-networking-apppart-2unidbg-step-by-step/</guid>
      
        <description>&lt;h2 id=&#34;1-objectives&#34;&gt;1. Objectives&lt;/h2&gt;
&lt;p&gt;It has been a while since I wrote an article related to unidbg. This sample is quite suitable, with moderate difficulty and a small pit for you. So the following is a series of articles, including unidbg environment supplement, Trace Block comparison process, Trace Code location difference. Mastering this series of routines, Native analysis can be considered an entry.&lt;/p&gt;
&lt;p&gt;This time, let&amp;rsquo;s run so with unidbg&lt;/p&gt;
&lt;p&gt;v6.1.0&lt;/p&gt;
&lt;h2 id=&#34;2-steps&#34;&gt;2. Steps&lt;/h2&gt;
&lt;h3 id=&#34;dump-so&#34;&gt;Dump so&lt;/h3&gt;
&lt;p&gt;IDA openslibencrypt.soGo to the offset addresses 0x24424 and 0x2B1BC corresponding to the two functions checkcode and decheckcode we want to analyze. We will find a strange problem that there is no assembly code at these two addresses, both are 0x00.&lt;/p&gt;
&lt;p&gt;I guess the shell is playing tricks on us. It extracts part of the code of these two key functions and fills it back when running, which prevents you from statically analyzing the so.&lt;/p&gt;
&lt;p&gt;However, no matter how the shell is added, the complete code must exist in the memory when running, otherwise the App will not run.&lt;/p&gt;
&lt;p&gt;So we also added drama, Dump&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;function dumpSo(){
    var libxx = Process.getModuleByName(&amp;#34;libencrypt.so&amp;#34;);
    console.log(&amp;#34;*****************************************************&amp;#34;);
    console.log(TAG + &amp;#34;name: &amp;#34; +libxx.name);
    console.log(TAG + &amp;#34;base: &amp;#34; +libxx.base);
    console.log(TAG + &amp;#34;size: &amp;#34; +ptr(libxx.size));

    var file_path = &amp;#34;/data/data/com.xxx.aeri.caranywhere/&amp;#34; + libxx.name + &amp;#34;_&amp;#34; + libxx.base + &amp;#34;_&amp;#34; + ptr(libxx.size) + &amp;#34;.so&amp;#34;;
    console.log(TAG + file_path);

    var file_handle = new File(file_path, &amp;#34;wb&amp;#34;);
    if (file_handle &amp;amp;&amp;amp; file_handle != null) {
        Memory.protect(ptr(libxx.base), libxx.size, &amp;#39;rwx&amp;#39;);
        var libso_buffer = ptr(libxx.base).readByteArray(libxx.size);
        file_handle.write(libso_buffer);
        file_handle.flush();
        file_handle.close();
        console.log(TAG + &amp;#34;[dump]:&amp;#34;, file_path);
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&#34;unidbg-run-so-basic-framework&#34;&gt;unidbg run so basic framework&lt;/h3&gt;
&lt;p&gt;After dumping the complete code of so, we start to build the basic framework of unidbg run so. The latest unidbg library code can be downloaded from the original author&amp;rsquo;s github.&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;public class CaranywhereDemo  extends AbstractJni {
    public AndroidEmulator emulator;
    public VM vm;
    public Module module;
    public DvmClass dvmClass;

    public static void main(String[] args) throws DecoderException, IOException {
        String apkPath = &amp;#34;/Users/h1yx/Desktop/xxx/6.1.0.apk&amp;#34;;
        CaranywhereDemo carObj = new CaranywhereDemo(apkPath);
        carObj.destroy();
    }

    public CaranywhereDemo(String apkFilePath) throws DecoderException, IOException {
        //*
        emulator = AndroidEmulatorBuilder.for64Bit()
                .setProcessName(&amp;#34;com.xxx.aeri.caranywhere&amp;#34;)
                .addBackendFactory(new Unicorn2Factory(true))
                .build(); 
        //*/

      
        emulator.getSyscallHandler().setEnableThreadDispatcher(false);

        final Memory memory = emulator.getMemory();               
        memory.setLibraryResolver(new AndroidResolver(23));

        vm = emulator.createDalvikVM(new File(apkFilePath)); 
        vm.setJni(this);
        vm.setVerbose(true); 

        new JniGraphics(emulator, vm).register(memory);
        new AndroidModule(emulator, vm).register(memory);

                dvmClass = vm.resolveClass(&amp;#34;com/bangcle/comapiprotect/CheckCodeUtil&amp;#34;);

                DalvikModule dm = vm.loadLibrary(&amp;#34;encrypt&amp;#34;, false);

        module = dm.getModule();
        dm.callJNI_OnLoad(emulator);
    }
    private void destroy() {
        try {
            emulator.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;This is the Hello World of unidbg. Don&amp;rsquo;t rush to run it. As we said before, the key code of so has been extracted, so we can&amp;rsquo;t run so directly. We have to replace it with the result of our dump.&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;// DalvikModule dm = vm.loadLibrary(&amp;#34;encrypt&amp;#34;, false);
DalvikModule dm = vm.loadLibrary(new File(&amp;#34;/Users/h1yx/Desktop/work/blogCode/xxx/libencrypt.so_0x7634ee7000_0x1d6000.so&amp;#34;), false);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&#34;step-by-step-to-complete-the-unidbg-run-so-environment&#34;&gt;Step by step to complete the unidbg run so environment&lt;/h3&gt;
&lt;p&gt;Let’s look at the first error first.&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[07:17:09 068]  WARN [com.github.unidbg.linux.ARM64SyscallHandler] (ARM64SyscallHandler:384) - handleInterrupt intno=2, NR=30, svcNumber=0x16e, PC=unidbg@0xfffe0774, LR=RX@0x40018c9c[libencrypt.so]0x18c9c, syscall=null
java.lang.UnsupportedOperationException: android/app/ActivityThread-&amp;gt;currentActivityThread()Landroid/app/ActivityThread;
        at com.github.unidbg.linux.android.dvm.AbstractJni.callStaticObjectMethod(AbstractJni.java:432)
        at com.github.unidbg.linux.android.dvm.AbstractJni.callStaticObjectMethod(AbstractJni.java:421)
        at com.github.unidbg.linux.android.dvm.DvmMethod.callStaticObjectMethod(DvmMethod.java:59)
        at com.github.unidbg.linux.android.dvm.DalvikVM64$111.handle(DalvikVM64.java:1723)
        at com.github.unidbg.linux.ARM64SyscallHandler.hook(ARM64SyscallHandler.java:130)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;The error message of unidbg is very clear, indicating that the static method currentActivityThread of the ActivityThread class is called in callStaticObjectMethod, and the return value is of ActivityThread type.&lt;/p&gt;
&lt;p&gt;We overload the callStaticObjectMethod function in CaranywhereDemo.java to solve this problem:&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;@Override
    public DvmObject&amp;lt;?&amp;gt; callStaticObjectMethod(BaseVM vm, DvmClass dvmClass, String signature, VarArg varArg) {
        switch (signature) {
            case &amp;#34;android/app/ActivityThread-&amp;gt;currentActivityThread()Landroid/app/ActivityThread;&amp;#34;:
                return vm.resolveClass(&amp;#34;android/app/ActivityThread&amp;#34;).newObject(null);
        }
        return super.callStaticObjectMethod(vm, dvmClass, signature, varArg);
    }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;We don&amp;rsquo;t care what this currentActivityThread is going to be used for, just return an empty class.&lt;/p&gt;
&lt;p&gt;Keep running, the next error is still in callStaticObjectMethod, it seems to be getting some system information&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;java.lang.UnsupportedOperationException: android/os/SystemProperties-&amp;gt;get(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;
        at com.github.unidbg.linux.android.dvm.AbstractJni.callStaticObjectMethod(AbstractJni.java:432)
        at com.h1yx.test.CaranywhereDemo.callStaticObjectMethod(CaranywhereDemo.java:78)
        at com.github.unidbg.linux.android.dvm.AbstractJni.callStaticObjectMethod(AbstractJni.java:421)
        at com.github.unidbg.linux.android.dvm.DvmMethod.callStaticObjectMethod(DvmMethod.java:59)
        at com.github.unidbg.linux.android.dvm.DalvikVM64$111.handle(DalvikVM64.java:1723)
        at com.github.unidbg.linux.ARM64SyscallHandler.hook(ARM64SyscallHandler.java:130)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;In this case, the function with input parameters can simply return an empty string, but people should print out the input parameters first.&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;@Override
    public DvmObject&amp;lt;?&amp;gt; callStaticObjectMethod(BaseVM vm, DvmClass dvmClass, String signature, VarArg varArg) {
        switch (signature) {
            case &amp;#34;android/os/SystemProperties-&amp;gt;get(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;&amp;#34;:
                System.out.println(&amp;#34;android/os/SystemProperties-&amp;gt;get params:&amp;#34; + varArg.formatArgs());
                return new StringObject(vm, &amp;#34;705KPGS001091&amp;#34;);

            case &amp;#34;android/app/ActivityThread-&amp;gt;currentActivityThread()Landroid/app/ActivityThread;&amp;#34;:
                return vm.resolveClass(&amp;#34;android/app/ActivityThread&amp;#34;).newObject(null);
        }
        return super.callStaticObjectMethod(vm, dvmClass, signature, varArg);
    }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h6 id=&#34;tip&#34;&gt;Tip:&lt;/h6&gt;
&lt;p&gt;The unidbg library function formatArgs prompts that it is not a public function. Change it to public final String formatArgs() in the VarArg class.&lt;/p&gt;
&lt;p&gt;Output&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;android/os/SystemProperties-&amp;gt;get params:&amp;#34;ro.serialno&amp;#34;, &amp;#34;unknown&amp;#34;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;It turns out that the purpose is to obtain the Android serial number, so just make one up at random. Since this sample is only called once, I am too lazy to judge the input parameter.&lt;/p&gt;
&lt;h6 id=&#34;tip-1&#34;&gt;Tip:&lt;/h6&gt;
&lt;p&gt;adb shell getprop ro.serialno can get the Android serial number&lt;/p&gt;
&lt;p&gt;This error is similar to the first one, but it is in the callObjectMethod function.&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;java.lang.UnsupportedOperationException: android/app/ActivityThread-&amp;gt;getSystemContext()Landroid/app/ContextImpl;
        at com.github.unidbg.linux.android.dvm.AbstractJni.callObjectMethod(AbstractJni.java:921)
        at com.github.unidbg.linux.android.dvm.AbstractJni.callObjectMethod(AbstractJni.java:855)
        at com.github.unidbg.linux.android.dvm.DvmMethod.callObjectMethod(DvmMethod.java:74)
        at com.github.unidbg.linux.android.dvm.DalvikVM64$31.handle(DalvikVM64.java:504)
        at com.github.unidbg.linux.ARM64SyscallHandler.hook(ARM64SyscallHandler.java:130)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Overload the callObjectMethod function and return the ContextImpl type directly&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;public DvmObject&amp;lt;?&amp;gt; callObjectMethod(BaseVM vm, DvmObject&amp;lt;?&amp;gt; dvmObject, String signature, VarArg varArg) {
        switch (signature) {
            case &amp;#34;android/app/ActivityThread-&amp;gt;getSystemContext()Landroid/app/ContextImpl;&amp;#34;:
                return vm.resolveClass(&amp;#34;android/app/ContextImpl&amp;#34;).newObject(null);
        }

        return super.callObjectMethod(vm, dvmObject, signature, varArg);
    }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Continue to report errors, this is to obtain the package management class&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;java.lang.UnsupportedOperationException: android/app/ContextImpl-&amp;gt;getPackageManager()Landroid/content/pm/PackageManager;
        at com.github.unidbg.linux.android.dvm.AbstractJni.callObjectMethod(AbstractJni.java:921)
        at com.h1yx.test.CaranywhereDemo.callObjectMethod(CaranywhereDemo.java:91)
        at com.github.unidbg.linux.android.dvm.AbstractJni.callObjectMethod(AbstractJni.java:855)
        at com.github.unidbg.linux.android.dvm.DvmMethod.callObjectMethod(DvmMethod.java:74)
        at com.github.unidbg.linux.android.dvm.DalvikVM64$31.handle(DalvikVM64.java:504)
        at com.github.unidbg.linux.ARM64SyscallHandler.hook(ARM64SyscallHandler.java:130)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;callObjectMethod Constructs the PackageManager class and returns&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;case &amp;#34;android/app/ContextImpl-&amp;gt;getPackageManager()Landroid/content/pm/PackageManager;&amp;#34;:
                return vm.resolveClass(&amp;#34;android/content/pm/PackageManager&amp;#34;).newObject(null);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Next error.&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;java.lang.UnsupportedOperationException: android/app/ContextImpl-&amp;gt;getSystemService(Ljava/lang/String;)Ljava/lang/Object;
        at com.github.unidbg.linux.android.dvm.AbstractJni.callObjectMethod(AbstractJni.java:921)
        at com.h1yx.test.CaranywhereDemo.callObjectMethod(CaranywhereDemo.java:93)
        at com.github.unidbg.linux.android.dvm.AbstractJni.callObjectMethod(AbstractJni.java:855)
        at com.github.unidbg.linux.android.dvm.DvmMethod.callObjectMethod(DvmMethod.java:74)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;This function has parameters. As usual, print out the parameters.&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;case &amp;#34;android/app/ContextImpl-&amp;gt;getSystemService(Ljava/lang/String;)Ljava/lang/Object;&amp;#34;:
                System.out.println(&amp;#34;android/app/ContextImpl-&amp;gt;getSystemService params:&amp;#34; + varArg.formatArgs());
                return vm.resolveClass(&amp;#34;java/lang/Object&amp;#34;).newObject(null);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;The parameters printed out are&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;android/app/ContextImpl-&amp;gt;getSystemService :&amp;#34;wifi&amp;#34;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;I guess it&amp;rsquo;s wifi related. Let&amp;rsquo;s return an empty Object first.&lt;/p&gt;
&lt;p&gt;The following two errors are related to obtaining the wifi Mac address.&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;case &amp;#34;android/net/wifi/WifiInfo-&amp;gt;getMacAddress()Ljava/lang/String;&amp;#34;:
                return new StringObject(vm, &amp;#34;00:00:00:00:00:00&amp;#34;);
            case &amp;#34;java/lang/Object-&amp;gt;getConnectionInfo()Landroid/net/wifi/WifiInfo;&amp;#34;:
                return vm.resolveClass(&amp;#34;android/net/wifi/WifiInfo&amp;#34;).newObject(null);&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Now that we have finally gotten JNI_OnLoad working, we can have a drink.&lt;/p&gt;
&lt;h3 id=&#34;call-checkcode&#34;&gt;call checkcode&lt;/h3&gt;
&lt;p&gt;After a long time, we started to get to the point. Let&amp;rsquo;s call checkcode&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;public void callA() {

    String strA = &amp;#34;F{\&amp;#34;appInnerVersion\&amp;#34;:\&amp;#34;125\&amp;#34;,\&amp;#34;appOutVersion\&amp;#34;:\&amp;#34;6.1.0\&amp;#34;,\&amp;#34;deviceType\&amp;#34;:0,\&amp;#34;imeiMD5\&amp;#34;:\&amp;#34;EE6431DEBB1E02FE469FA5E8467CD693\&amp;#34;,\&amp;#34;mobileModel\&amp;#34;:\&amp;#34;GOOGLE PIXEL 2 XL\&amp;#34;,\&amp;#34;softType\&amp;#34;:\&amp;#34;0\&amp;#34;}&amp;#34;;
    String strC = &amp;#34;1662109202156&amp;#34;;

    String methodName = &amp;#34;checkcode(Ljava/lang/String;ILjava/lang/String;)Ljava/lang/String;&amp;#34;;
    DvmObject ret = dvmClass.callStaticJniMethodObject(emulator, methodName,strA,1,strC);
    String strOut = (String)ret.getValue();
    System.out.println(&amp;#34;call checkcode: &amp;#34; + strOut);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;There is a new error&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;java.lang.UnsupportedOperationException: android/os/Build-&amp;gt;MODEL:Ljava/lang/String;
        at com.github.unidbg.linux.android.dvm.AbstractJni.getStaticObjectField(AbstractJni.java:103)
        at com.github.unidbg.linux.android.dvm.AbstractJni.getStaticObjectField(AbstractJni.java:53)
        at com.github.unidbg.linux.android.dvm.DvmField.getStaticObjectField(DvmField.java:106)
        at com.github.unidbg.linux.android.dvm.DalvikVM64$142.handle(DalvikVM64.java:2228)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;This time we need to overload the getStaticObjectField class&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;public DvmObject&amp;lt;?&amp;gt; getStaticObjectField(BaseVM vm, DvmClass dvmClass, String signature) {
        switch (signature){
            case &amp;#34;android/os/Build$VERSION-&amp;gt;SDK:Ljava/lang/String;&amp;#34;:
                return new StringObject(vm, &amp;#34;23&amp;#34;);
            case &amp;#34;android/os/Build-&amp;gt;MANUFACTURER:Ljava/lang/String;&amp;#34;:
                return new StringObject(vm, &amp;#34;Google&amp;#34;);
            case &amp;#34;android/os/Build-&amp;gt;MODEL:Ljava/lang/String;&amp;#34;:
                return new StringObject(vm, &amp;#34;pixel&amp;#34;);
        }
        return super.getStaticObjectField(vm,dvmClass,signature);
    }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;These values are relatively simple, all of string type, so we assign them a value.&lt;/p&gt;
&lt;p&gt;Yeah, it&amp;rsquo;s done.&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;call checkcode: FDAEKCAcOAQcNBgkEAwoCDQgEDQ4JBAgAAA4ODgcJBgkKBwYPBwwEBw4LBwsODQcFDQMMCAUJDAcEDQsADwEDDAIGDgQJAQYNDggNDQsCAQcNAwwIBQkMBwQNCwAPAQMMDQYCDAgBBQwGBAUIAwULBAoHBg8HDAQHDgsHCw4NBwUPAwEADAkPBQcODAcDDgYCDwMJCQUEAAgHDAUIBwEDBwMKDgcGBg4NDAgLBAAEAw8PAwEADAkPBQcODAcDDgYCCAQNDgkECAAADg4OBwkGCQIIAwkLBgACCgoGAgcCAwEMAQoIBw4BBw0GCQQDCgINDwMBAAwJDwUHDgwHAw4GAggHBwEMBAAAAwMJDQUDDQECBg4ECQEGDQ4IDQ0LAgEHDw0ADwMJDgQICAsJAgILBw8NAA8DCQ4ECAgLCQICCwcNBgIMCAEFDAYEBQgDBQsEAgYOBAkBBg0OCA0NCwIBBw==&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Don’t be too happy yet, this result seems a bit wrong no matter how you look at it, and it is quite different from the result of our hook.&lt;/p&gt;
&lt;p&gt;How do I determine whether the result is right or wrong? How do I compare it with the app to get the correct result?Wait for the next Trace Block and Trace Code tutorial.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;The unidbg environment actually tests your Android programming ability.&lt;/p&gt;
&lt;p&gt;Google the keyword unidbg + error message, and you will usually find someone who has experienced the same problem.&lt;/p&gt;
&lt;p&gt;What? You can&amp;rsquo;t open Google? Is it too late for me to persuade you to change your career?&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Encryption Analysis of a Car Network App Communication Protocol (Part 1)</title>
      <link>https://578164.xyz/post/other/encryption-analysis-of-a-car-network-app-communication-protocolpart1/</link>
      <pubDate>Tue, 30 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://578164.xyz/post/other/encryption-analysis-of-a-car-network-app-communication-protocolpart1/</guid>
      
        <description>&lt;h2 id=&#34;1-objectives&#34;&gt;1. Objectives&lt;/h2&gt;
&lt;p&gt;Boss: I just bought a new car recently. The app that came with it is quite interesting. Would you like to take a look at it?&lt;/p&gt;
&lt;p&gt;Me: Oh my god, it’s packed, it’s quite interesting, let me try it.&lt;/p&gt;
&lt;p&gt;v6.1.0&lt;/p&gt;
&lt;h2 id=&#34;2-steps&#34;&gt;2. Steps&lt;/h2&gt;
&lt;h3 id=&#34;packet-capture&#34;&gt;Packet capture&lt;/h3&gt;
&lt;p&gt;My packet capture environment is Mac 10.14.6 + httpToolKit, and I captured the packet smoothly in this step.&lt;/p&gt;
&lt;p&gt;1:main&lt;/p&gt;
&lt;p&gt;As you can see, both the http request and the return value are encrypted. This is our goal.requestandresponseThe origin of .&lt;/p&gt;
&lt;h3 id=&#34;shelling&#34;&gt;Shelling&lt;/h3&gt;
&lt;p&gt;Our first choice for shelling isBlackDex, easy to use and effective. However, it does not work well for this sample, only one dex is extracted, and it is likely to have failed.&lt;/p&gt;
&lt;p&gt;Then go to the gourd baby bossFRIDA-DEXDump, This sample is very cunning. It crashes as soon as the frida spawn mode is run. It seems that the shell is relatively hard.&lt;/p&gt;
&lt;p&gt;This is a tricky situation. Recall that we used Xcube to deal with packed applications before. Let’s try it again this time.&lt;/p&gt;
&lt;p&gt;Xcube did not disappoint us and the injection was successful. But how to run FRIDA-DEXDump in Xcube mode?&lt;/p&gt;
&lt;p&gt;I wanted to modify the code and merge it in. I accidentally discovered that Yang Shen also wrote DumpDex &lt;a href=&#34;https://github.com/lasting-yang/frida_dump&#34;&gt;https://github.com/lasting-yang/frida_dump&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Easily merged into js, now a successful dump is produced.&lt;/p&gt;
&lt;h3 id=&#34;string-search&#34;&gt;String Search&lt;/h3&gt;
&lt;p&gt;Direct Search&amp;quot;request&amp;quot; Not much results.&lt;/p&gt;
&lt;p&gt;Obviously, thisjsonObject.addPropertyThe biggest suspect.&lt;/p&gt;
&lt;p&gt;Click in and find the CheckCodeUtil class. Its checkcode and decheckcode are probably our targets this time.&lt;/p&gt;
&lt;p&gt;1:utilcls&lt;/p&gt;
&lt;h3 id=&#34;hook&#34;&gt;hook&lt;/h3&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;var CheckCodeUtilCls = Java.use(&amp;#34;com.bangcle.comapiprotect.CheckCodeUtil&amp;#34;);
CheckCodeUtilCls.checkcode.implementation = function(a,b,c){
    var rc = this.checkcode(a,b,c);
    console.log(TAG + &amp;#34;checkcode &amp;gt;&amp;gt;&amp;gt; a = &amp;#34; + a);
    console.log(TAG + &amp;#34;checkcode &amp;gt;&amp;gt;&amp;gt; b = &amp;#34; + b);
    console.log(TAG + &amp;#34;checkcode &amp;gt;&amp;gt;&amp;gt; c = &amp;#34; + c);
    console.log(TAG + &amp;#34;checkcode &amp;gt;&amp;gt;&amp;gt; rc = &amp;#34; + rc);
    return rc;
}

CheckCodeUtilCls.decheckcode.implementation = function(a){
    var rc = this.decheckcode(a);
    console.log(TAG + &amp;#34;decheckcode &amp;gt;&amp;gt;&amp;gt; a = &amp;#34; + a);
    console.log(TAG + &amp;#34;decheckcode &amp;gt;&amp;gt;&amp;gt; rc = &amp;#34; + rc);
    return rc;

}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;I ran it and it was strange, there was no output at all, this doesn&amp;rsquo;t make sense?&lt;/p&gt;
&lt;p&gt;Look carefully, silly, there are two checkcode functions in this class, so we need to specify which one to hook. Because we ignored the error output when printing the output, we did not see the error.&lt;/p&gt;
&lt;p&gt;Notice:If there is no output in the Xcube environment, it is likely that the script reported an error. In this case, do not filter and directly view all output logs to see the error.&lt;/p&gt;
&lt;p&gt;Modify the code&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;CheckCodeUtilCls.checkcode.overload(&amp;#39;java.lang.String&amp;#39;,&amp;#39;int&amp;#39;,&amp;#39;java.lang.String&amp;#39;).implementation = function(a,b,c){&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;This time the results were printed out smoothly. But something strange happened again, the App crashed.&lt;/p&gt;
&lt;h3 id=&#34;rescue-a-crashed-app&#34;&gt;Rescue a crashed app&lt;/h3&gt;
&lt;p&gt;Why did it crash? Is there a bug in our printing data?&lt;/p&gt;
&lt;p&gt;First comment out the code that prints the input parameters and results. Still crashes.&lt;/p&gt;
&lt;p&gt;I commented out all the hook codes and it stopped crashing, but I can&amp;rsquo;t play without hooks?&lt;/p&gt;
&lt;p&gt;The ultimate solution is to change your phone. Many times, it is enough to change your phone, maybe the phone is not suitable for the local environment.&lt;/p&gt;
&lt;p&gt;The result was disappointing. I changed the phone and it still crashed.&lt;/p&gt;
&lt;p&gt;There is no fluke mentality, which means that the App or shell has detected the Hook of key functions and will destroy it if it is found to be hooked.&lt;/p&gt;
&lt;p&gt;The App or shell must be doing the detection at the Native layer. If we want to deal with it, we have to be at the same level as it.&lt;/p&gt;
&lt;p&gt;Instead of hooking the functions of the Jave layer, directly hook the checkcode and decheckcode of the Native layer.&lt;/p&gt;
&lt;h3 id=&#34;hook-native&#34;&gt;Hook Native&lt;/h3&gt;
&lt;p&gt;We found System.loadLibrary(&amp;ldquo;encrypt&amp;rdquo;); in the Java code of CheckCodeUtil, which means that the target we are dealing with is libencrypt.so.&lt;/p&gt;
&lt;p&gt;IDA opened it, exported the table, and exposed two pieces of information.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The address of the checkcode function is 0x24424, and the address of the decheckcode function is 0x2B1BC.&lt;/li&gt;
&lt;li&gt;These two functions most likely use the AES algorithm.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Keep Hooking&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;var targetSo = Module.findBaseAddress(&amp;#39;libencrypt.so&amp;#39;);
console.log(TAG +&amp;#34; ############# libencrypt.so: &amp;#34; +targetSo);
// 24424    2B1BC

Interceptor.attach(targetSo.add(0x24424 ),{
    onEnter: function(args){
        var strCls = Java.use(&amp;#39;java.lang.String&amp;#39;);

        this.rBuf = ptr(this.context.x0);
        console.log(TAG + &amp;#34; ======================================== &amp;#34;);
        // console.log(TAG + &amp;#34;-------- checkcode x0 = &amp;#34; + ptr(this.context.x0) ) ;

        var strA = Java.cast(this.context.x2, strCls);
        console.log(TAG + &amp;#34;-------- checkcode a = &amp;#34; + strA);

        console.log(TAG + &amp;#34;-------- checkcode b = &amp;#34; + ptr(this.context.x3));

        var strC = Java.cast(this.context.x4, strCls);
        console.log(TAG + &amp;#34;-------- checkcode b = &amp;#34; + strC);


    },
    onLeave: function(retval){
        var strCls = Java.use(&amp;#39;java.lang.String&amp;#39;);
        var strRc = Java.cast(retval, strCls);
        console.log(TAG + &amp;#34;-------- checkcode rc = &amp;#34; + strRc);

    }
});

Interceptor.attach(targetSo.add(0x2B1BC ),{
    onEnter: function(args){
        var strCls = Java.use(&amp;#39;java.lang.String&amp;#39;);

        this.rBuf = ptr(this.context.x0);
        console.log(TAG + &amp;#34; ======================================== &amp;#34;);
        // console.log(TAG + &amp;#34;-------- checkcode x0 = &amp;#34; + ptr(this.context.x0) ) ;

        var strA = Java.cast(this.context.x2, strCls);
        console.log(TAG + &amp;#34;-------- decheckcode a = &amp;#34; + strA);


    },
    onLeave: function(retval){
        var strCls = Java.use(&amp;#39;java.lang.String&amp;#39;);
        var strRc = Java.cast(retval, strCls);
        console.log(TAG + &amp;#34;-------- decheckcode rc = &amp;#34; + strRc);

    }
});&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Boss:  isn&amp;rsquo;t the first parameter of the function X0? Why did you print the first parameter as X2?&lt;/p&gt;
&lt;p&gt;Me: Boss, I asked you to approve more funds to buy books a long time ago, but you didn&amp;rsquo;t agree. Now you are showing your weakness. If you look up JNI programming, you will know that the first two parameters of Java calling C/C++ functions are fixed. The actual parameters passed in start from the third one.&lt;/p&gt;
&lt;p&gt;Run again this time.&lt;/p&gt;
&lt;p&gt;1:rc&lt;/p&gt;
&lt;p&gt;The truth is out.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s already autumn in the capital, so it&amp;rsquo;s not time to order fresh beer, but it&amp;rsquo;s time to order Erguotou.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;There are thousands of ways to unpack the shell, but the key is still Dump Dex.&lt;/p&gt;
&lt;p&gt;Don&amp;rsquo;t be afraid of shelled apps, most likely all the clues will be revealed after unpacking. Unshelled apps are the real scary ones.&lt;/p&gt;
&lt;p&gt;If the script does not have any output, it may not necessarily mean that the location is wrong, but it may also be that you did not see the error reported by the script.&lt;/p&gt;
&lt;p&gt;The app crashed, and changing the phone was effective, although I was embarrassed this time.&lt;/p&gt;
&lt;p&gt;For this sample, IDA also tells us that the function entry code in so is also extracted. To analyze this so, we probably have to dump so.&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>appdbg: A virtual machine disguised as a debugger</title>
      <link>https://578164.xyz/post/other/appdbg-a-virtual-machine-disguised-as-a-debugger/</link>
      <pubDate>Sun, 29 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://578164.xyz/post/other/appdbg-a-virtual-machine-disguised-as-a-debugger/</guid>
      
        <description>&lt;h2 id=&#34;1-objectives&#34;&gt;1. Objectives&lt;/h2&gt;
&lt;p&gt;Today&amp;rsquo;s apps are restless. The Java layer tries to flirt with the Native layer, and the Native layer likes to collude with Jave.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s too difficult to analyze a so quietly.&lt;/p&gt;
&lt;p&gt;Is it possible to simulate the execution of the App on the PC, so that when Native is connected to the Jave layer, a lot of work of supplementing the environment can be saved?&lt;/p&gt;
&lt;p&gt;appdbg is such a virtual machine disguised as a debugger.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/asmjmp0/appdbg&#34;&gt;https://github.com/asmjmp0/appdbg&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The author&amp;rsquo;s introduction is:&lt;/p&gt;
&lt;p&gt;make it possible to run android dex file in original Java Virtual Machine.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;change every class before it will be loaded&lt;/li&gt;
&lt;li&gt;change every item of the class after it was loaded&lt;/li&gt;
&lt;li&gt;hook java method&lt;/li&gt;
&lt;li&gt;implement native method by yourself or unidbg…&lt;/li&gt;
&lt;li&gt;provide java method level debug ability (dex2jar transformed class file without debug info,so we can&amp;rsquo;t step in)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Anyway, it looks pretty cool.&lt;/p&gt;
&lt;h2 id=&#34;2-steps&#34;&gt;2. Steps&lt;/h2&gt;
&lt;h3 id=&#34;install-gradle-first&#34;&gt;Install gradle first&lt;/h3&gt;
&lt;p&gt;My machine environment is as follows&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;mac 10.14.6&lt;/li&gt;
&lt;li&gt;JDK 1.8&lt;/li&gt;
&lt;li&gt;IntelliJ idea 2020.1.2&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The appdbg project is compiled with gradle, and idea can also configure it automatically, but it feels better to install gradle yourself.&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;brew install gradle&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;After the installation is complete, execute gradle -v to successfully print out the information, which means the installation is successful.&lt;/p&gt;
&lt;h3 id=&#34;start-compiling--configure-sdk-and-ndk-paths&#34;&gt;Start compiling — Configure sdk and ndk paths&lt;/h3&gt;
&lt;p&gt;First git clone the code, then run it in the root directorygradle build&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;* What went wrong:
A problem occurred configuring project &amp;#39;:test-app&amp;#39;.
&amp;gt; SDK location not found. Define location with an ANDROID_SDK_ROOT environment variable or by setting the sdk.dir path in your project&amp;#39;s local properties file at &amp;#39;/Users/h1yx/Desktop/work/blogCode/ffgithub/appdbg/local.properties&amp;#39;.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;As expected, an error message was reported. Since the author brought an Android App example, the compilation requires Android SDK and NDK. So you need to configure the paths of SDK and NDK first.&lt;/p&gt;
&lt;p&gt;Add a file local.properties in the project root directory with the following content&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sdk.dir=/Users/h1yx/Library/Android/sdk&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;The Android API in this project uses 31 compileSdkVersion 31 So I first downloaded Android Api 31 using the SDK Manager in Android Studio&lt;/p&gt;
&lt;p&gt;Then configure the NDK path in test-app/build.gradle&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;android {
    compileSdkVersion 31
    buildToolsVersion &amp;#34;30.0.0&amp;#34;
        ndkPath &amp;#34;/Users/h1yx/Library/Android/sdk/ndk/21.4.7075529&amp;#34;
   ...
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Continue compiling&lt;/p&gt;
&lt;h3 id=&#34;androidx-control-issues&#34;&gt;AndroidX control issues&lt;/h3&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/appdbg/test-app/src/main/java/jmp0/test/testapp/MainActivity.kt: (3, 24): Unresolved reference: v7
/appdbg/test-app/src/main/java/jmp0/test/testapp/MainActivity.kt: (11, 22): Unresolved reference: AppCompatActivity&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;This is a problem with Google&amp;rsquo;s UI upgrade. For Android programmers like us who are not very good at it, we can only ask Google.&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;// test-app/src/main/java/jmp0/test/testapp/MainActivity.kt

// import android.support.v7.app.AppCompatActivity
import androidx.appcompat.app.AppCompatActivity&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;The next error is&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/appdbg/test-app/src/main/java/jmp0/test/testapp/TestContext.kt: (9, 24): Unresolved reference: annotation
/appdbg/test-app/src/main/java/jmp0/test/testapp/TestContext.kt: (33, 6): Unresolved reference: RequiresApi&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Google said that we should change it like this&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;// test-app/src/main/java/jmp0/test/testapp/TestContext.kt

// add h1yx
// import android.support.annotation.RequiresApi
import androidx.annotation.RequiresApi&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Continue compiling&lt;/p&gt;
&lt;h3 id=&#34;android-sdk-version&#34;&gt;Android SDK version&lt;/h3&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;  Fix the issues identified by lint, or add the following to your build script to proceed with errors:
  ...
  android {
      lintOptions {
          abortOnError false
      }
  }
  ...
  Errors found:

  /Users/zzx/Desktop/work/blogCode/ffgithub/appdbg/test-app/src/main/java/jmp0/test/testapp/TestContext.kt:55: Error: Call requires API level 26 (current min is 19): testIMEI [NewApi]
          testIMEI()
          ~~~~~~~~&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;These are two errors. One seems to ask us to add a compilation command, and the other seems to think that our minSdkVersion is set too low.&lt;/p&gt;
&lt;p&gt;Change it in test-app/build.gradle&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;android {
    ...
        defaultConfig {
                    applicationId &amp;#34;jmp0.test.testapp&amp;#34;
                        minSdkVersion 28  // 19
                        。。。
                }

...
        lintOptions {
        abortOnError false
                }
...
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;The green BUILD SUCCESSFUL appears&lt;/p&gt;
&lt;h3 id=&#34;run&#34;&gt;run&lt;/h3&gt;
&lt;p&gt;Finally, it can run happily. The author said run main&lt;/p&gt;
&lt;p&gt;I cried because I didn&amp;rsquo;t understand which main to run at first. There are quite a few mains in the project.&lt;/p&gt;
&lt;p&gt;Later I found that it was probably run core/src/main/java/jmp0/Main.kt.&lt;/p&gt;
&lt;p&gt;But there is no run after right clicking.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s so difficult to be a 20-year-old Java programmer.&lt;/p&gt;
&lt;p&gt;I asked Google, and he said that in File → Project Structure, set core/src to sources.&lt;/p&gt;
&lt;p&gt;1:setsrc&lt;/p&gt;
&lt;p&gt;Now you can run the program by right clicking on the Main.kt file (if it still doesn&amp;rsquo;t appear, close IDEA and reopen it to wait for it to finish scanning indexing)&lt;/p&gt;
&lt;p&gt;Don&amp;rsquo;t rush to run&lt;/p&gt;
&lt;p&gt;There are two steps to do. The first step is to patch the JDK. This step is more troublesome.&lt;/p&gt;
&lt;p&gt;I will just use the jdk prepared by the author&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/asmjmp0/appdbg-JDK&#34;&gt;https://github.com/asmjmp0/appdbg-JDK&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;On Mac, you also need to re-sign libjvm.dylib. Find the signature id from the one registered in Xcode.&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;codesign -f -s &amp;#34;Developer ID Application: Fei Fen (HHZN32E11C)&amp;#34; libjvm.dylib&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Another step is to patch rt.jar to support io redirection. This step only requires running the JDKmodify project. Use the generated rt.jar to replace the rt.jar in jdk&lt;/p&gt;
&lt;h3 id=&#34;youre-done&#34;&gt;You&amp;rsquo;re done!&lt;/h3&gt;
&lt;p&gt;Let&amp;rsquo;s analyze the example in the main function.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;During the compilation process, we also encountered&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;gt; Task :prepareKotlinBuildScriptModel UP-TO-DATE
IOException: https://dl.google.com/android/repository/addons_list-3.xml
java.net.ConnectException: Connection refused: connect
IOException: https://dl.google.com/android/repository/addons_list-2.xml
java.net.ConnectException: Connection refused: connect
IOException: https://dl.google.com/android/repository/addons_list-1.xml
java.net.ConnectException: Connection refused: connect
Failed to download any source lists!&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;This can be done with scientific Internet access.&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Teach you how to build a Frida &#43; Sekiro RPC framework</title>
      <link>https://578164.xyz/post/other/frida-sekiro-rpc-framework/</link>
      <pubDate>Thu, 21 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://578164.xyz/post/other/frida-sekiro-rpc-framework/</guid>
      
        <description>&lt;h2 id=&#34;objectives&#34;&gt;Objectives&lt;/h2&gt;
&lt;p&gt;Signing with a mobile phone is a tricky solution. We have introduced it before.&lt;/p&gt;
&lt;p&gt;Sekiro + Xposed signature solution&lt;/p&gt;
&lt;p&gt;Frida is now widely used, and Sekiro has also upgraded to a new version. Today we will teach you how to build a Frida + Sekiro Rpc framework.&lt;/p&gt;
&lt;h3 id=&#34;run-the-server-first&#34;&gt;Run the server first&lt;/h3&gt;
&lt;p&gt;The official website is here &lt;a href=&#34;https://github.com/virjar/sekiro&#34;&gt;https://github.com/virjar/sekiro&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;git clone it;&lt;/p&gt;
&lt;p&gt;On Linux or Mac, execute the script build_demo_server.sh, and then get the release compressed package: sekiro-service-demo/target/sekiro-release-demo.zip&lt;/p&gt;
&lt;p&gt;If you are using Windows, or don&amp;rsquo;t want to build it yourself, you can download it directly here&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://oss.virjar.com/sekiro/sekiro-demo&#34;&gt;https://oss.virjar.com/sekiro/sekiro-demo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Transfer the zip package to the server and decompress it&lt;/p&gt;
&lt;p&gt;Run sekiro.bat on Windows and sekiro.sh on Linux/Mac&lt;/p&gt;
&lt;p&gt;This way the server is running.&lt;/p&gt;
&lt;h3 id=&#34;firda-develops-sekiro-client&#34;&gt;firda develops sekiro client&lt;/h3&gt;
&lt;p&gt;Sekiro is a pretty awesome library that basically works out of the box.&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;new SekiroClient(&amp;#34;test-android&amp;#34;, UUID.randomUUID().toString())
        .setupSekiroRequestInitializer(new SekiroRequestInitializer() {
            @Override
            public void onSekiroRequest(SekiroRequest sekiroRequest, HandlerRegistry handlerRegistry) {
                handlerRegistry.registerSekiroHandler(new ClientTimeHandler());
            }
        }).start();&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;In the Android code, just add an API like this, and then write the logic in the ClientTimeHandler class&lt;/p&gt;
&lt;p&gt;The use of frida is a little bit complicated. The complexity lies in creating a java class ClientTimeHandler to handle the calling logic.&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;function initSekiro() {
    const SekiroClient = Java.use(&amp;#39;com.virjar.sekiro.business.api.SekiroClient&amp;#39;);
    const ActionHandler = Java.use(&amp;#39;com.virjar.sekiro.business.api.interfaze.ActionHandler&amp;#39;);
    const SekiroRequestInitializer = Java.use(&amp;#39;com.virjar.sekiro.business.api.interfaze.SekiroRequestInitializer&amp;#39;);

    const ClientTimeHandler = Java.registerClass({
        name: &amp;#39;ClientTimeHandler&amp;#39;,
        implements: [ActionHandler],
        methods: {
            action: function () {
                return &amp;#39;mobile&amp;#39;;
            },
            handleRequest: function (sekiroRequest, sekiroResponse) {
                                const requestJsonData = sekiroRequest.getJsonModel();
                                const requestData = JSON.parse(requestJsonData)[&amp;#39;requestData&amp;#39;];

                                if(!requestData){
                                        sekiroResponse.failed(JavaString.$new(&amp;#39;requestData 不能为空&amp;#39;));
                                }else{
                                        try{
                                                sekiroResponse.success(callMobile(requestData));
                                        }catch(error){
                                                sekiroResponse.failed(JavaString.$new(error.stack));
                                                throw error;
                                        }
                                }
            }
        }
    })

     const SekiroRequestDefault = Java.registerClass({
        name: &amp;#34;SekiroRequestDefault&amp;#34;,
        implements: [SekiroRequestInitializer],
        methods: {
            onSekiroRequest: function (sekiroRequest, handlerRegistry) {
                handlerRegistry.registerSekiroHandler(ClientTimeHandler.$new());
            }
        }
    });

    const clientID = guid();
    const group = &amp;#39;fridaHook_atlasEncrypt&amp;#39;;
    const ip = &amp;#39;110.42.246.110&amp;#39;;

    const sekiro = SekiroClient.$new(group, clientID, ip, 8989);
    sekiro.setupSekiroRequestInitializer(SekiroRequestDefault.$new());
    sekiro.start();
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;That&amp;rsquo;s it, hang up frida and run&lt;/p&gt;
&lt;h3 id=&#34;sekiro-status-viewing-and-access-service&#34;&gt;Sekiro status viewing and access service&lt;/h3&gt;
&lt;p&gt;http://110.42.246.110:8989/business-demo/groupList displays all groups registered in the current system&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;{&amp;#34;data&amp;#34;:[&amp;#34;fridaHook_atlasEncrypt&amp;#34;],&amp;#34;ok&amp;#34;:true,&amp;#34;status&amp;#34;:0}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;http://110.42.246.110:8989/business-demo/clientQueue?group=fridaHook_atlasEncrypt shows the clients/mobile phones registered under a specific group.&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;{&amp;#34;data&amp;#34;:[&amp;#34;65c8e8b5-1a67-2036-5b38-769cb670aeb3&amp;#34;],&amp;#34;ok&amp;#34;:true,&amp;#34;status&amp;#34;:0}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Execute it and see the result&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# -*- coding: utf-8 -*-

import requests

url = &amp;#39;http://110.42.246.110:8989/business-demo/invoke&amp;#39;

mobileid = &amp;#39;18913872618&amp;#39;

data = {
    &amp;#39;group&amp;#39;: &amp;#39;fridaHook_atlasEncrypt&amp;#39;,
    &amp;#39;action&amp;#39;: &amp;#39;mobile&amp;#39;,
    &amp;#39;requestData&amp;#39;: mobileid
    }

res = requests.post(url,json=data).json()
print(res[&amp;#39;data&amp;#39;])&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;The result is perfect&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;3sCt3iAAMzIwOTAxMjA4AM8HAO7Jtk8ia8xTExAAAACFS7z70nRA3Ppgtdz9Kefb&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Fresh beer after work&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Basically, frida can use Java libraries seamlessly, which is much more convenient than Xposed.&lt;/p&gt;
&lt;p&gt;There is a small problem that the frida hook app has a chance of crashing, so a watchdog is needed to implement this.&lt;/p&gt;
&lt;p&gt;Sekiro official documentation &lt;a href=&#34;https://sekiro.virjar.com/sekiro-doc/index.html&#34;&gt;https://sekiro.virjar.com/sekiro-doc/index.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;frida loads sekiro dex file to interact with the server &lt;a href=&#34;https://www.qinless.com/387&#34;&gt;https://www.qinless.com/387&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Only then did I realize that all my efforts were just to complete an ordinary life.&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>An e-commerce App sign algorithm upgrade verification</title>
      <link>https://578164.xyz/post/other/an-e-commerce-app-sign-algorithm-upgrade-verification/</link>
      <pubDate>Mon, 12 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://578164.xyz/post/other/an-e-commerce-app-sign-algorithm-upgrade-verification/</guid>
      
        <description>&lt;h2 id=&#34;1-objectives&#34;&gt;1. Objectives&lt;/h2&gt;
&lt;p&gt;The app has been upgraded, but has its algorithm also been upgraded? This is a question. We need to verify it quickly, otherwise Mr. Li will go crazy.&lt;/p&gt;
&lt;h6 id=&#34;note&#34;&gt;Note:&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;Objection&lt;/li&gt;
&lt;li&gt;Unidbg&lt;/li&gt;
&lt;li&gt;gettimeofday&lt;/li&gt;
&lt;li&gt;lrand48&lt;/li&gt;
&lt;li&gt;V9.4.2&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-analysis&#34;&gt;2. Analysis&lt;/h2&gt;
&lt;p&gt;In the previous analysis of a signature algorithm of an e-commerce app (Part 1) we located the &lt;strong&gt;com.xxxxxxxx.common.utils.BitmapkitUtils&lt;/strong&gt; class and its &lt;strong&gt;getSignFromJni&lt;/strong&gt; function as the key functions for calculating the sign.&lt;/p&gt;
&lt;p&gt;In the new version, we first use Objection to hook com.xxxxxxxx.common.utils.BitmapkitUtils&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;objection -g com.xxxxxxxx.app.mall explore
android hooking watch class &amp;#39;com.xxxxxxxx.common.utils.BitmapkitUtils&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Then from the App, open any product page:&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;(agent) [3688199735633] Called com.xxxxxxxx.common.utils.BitmapkitUtils.loadBMP()
(agent) [3688199735633] Called com.xxxxxxxx.common.utils.BitmapkitUtils.isFuncAvailable()
(agent) [3688199735633] Called com.xxxxxxxx.common.utils.BitmapkitUtils.loadBMP()
(agent) [3688199735633] Called com.xxxxxxxx.common.utils.BitmapkitUtils.getSignFromJni(android.content.Context, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Perfect, indicating that the function entry has not changed, and it is still signed by &lt;strong&gt;getSignFromJni .&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s check whether the input parameters and return values are consistent with the packet capture results:&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;android hooking watch class_method &amp;#39;com.xxxxxxxx.common.utils.BitmapkitUtils.getSignFromJni&amp;#39; --dump-args --dump-return&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Still OK, I saw the familiar sign value.&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;(agent) [1921806846023] Arguments com.xxxxxxxx.common.utils.BitmapkitUtils.getSignFromJni(&amp;#34;&amp;lt;instance: android.content.Context, $className: com.xxxxxxxx.app.mall.JDApp&amp;gt;&amp;#34;, &amp;#34;asynInteface&amp;#34;, &amp;#34;{\&amp;#34;intefaceType\&amp;#34;:\&amp;#34;asynIntefaceType\&amp;#34;,\&amp;#34;skuId\&amp;#34;:\&amp;#34;10026198901146\&amp;#34;}&amp;#34;, &amp;#34;xxc930c5dcfe67xx&amp;#34;, &amp;#34;android&amp;#34;, &amp;#34;9.4.2&amp;#34;)
(agent) [1921806846023] Return Value: &amp;#34;st=1615000030090&amp;amp;sign=7841200ddd83d8cda0828b1cae56b41e&amp;amp;sv=110&amp;#34;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Now is the last step, to check whether the sign result is the same as the previous version. To do this, refer to &lt;a href=&#34;http://localhost:1313/post/timestops/&#34;&gt;the algorithm restoration assistant (I) First stop time&lt;/a&gt; and fix the values of gettimeofday and lrand48.&lt;/p&gt;
&lt;p&gt;Turn outKnowledge Planet&lt;strong&gt;There is a practical tutorial on Unidbg simulation execution of big manufacturers&lt;/strong&gt; written last year (the Year of the Rat) , and the new version of the apk is loaded.&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;// vm = emulator.createDalvikVM(new File(&amp;#34;/Users/h1yx/Desktop/V9.2.2.85371_T1_350271430_lc029.apk&amp;#34;));
vm = emulator.createDalvikVM(new File(&amp;#34;/Users/h1yx/Desktop/V9_4_2.apk&amp;#34;));&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Run&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;st=1606701201628&amp;amp;sign=59039230dc2e1ea27a4f250d9ec81b8c&amp;amp;sv=111
destroy
run&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;This value looks familiar.&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Code Restoration Technology ARM Assembly Introduction Tutorial (I) Hello World!</title>
      <link>https://578164.xyz/post/other/code-restoration-technology-arm-assembly-introduction-tutorialihello-world/</link>
      <pubDate>Mon, 12 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://578164.xyz/post/other/code-restoration-technology-arm-assembly-introduction-tutorialihello-world/</guid>
      
        <description>&lt;h2 id=&#34;1-objectives&#34;&gt;1. Objectives&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Why learn ARM assembly?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;No reason.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Is it useful to learn ARM assembly?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It&amp;rsquo;s useless&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Can I find a job after learning ARM assembly?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;None of the popular large-scale software is written in assembly language, so what do you think?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Do you still need to learn ARM assembly?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Why not learn it? You have nothing to do anyway. Knowing some low-level languages and getting close to the essence of computer operation is still very cool.&lt;/p&gt;
&lt;h2 id=&#34;2-steps&#34;&gt;2. Steps&lt;/h2&gt;
&lt;h3 id=&#34;hello-world&#34;&gt;Hello World!&lt;/h3&gt;
&lt;p&gt;Boss&amp;rsquo;s father, was also engaged in research and development when he was young. After retirement, he had some free time and planned to practice calligraphy.&lt;/p&gt;
&lt;p&gt;One day, the weather was fine and the old boss had finished three rounds of drinks. He was in a relaxed mood and wrote down the following poem on the fine rice paper that the young boss had given him:Hello World!&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;.text

.globl _start

_start:
    mov     %r0, $1                                // fd 1 (stdout)
    ldr     %r1, =message
    mov     %r2, $message_len
    mov     %r7, $4                                // syscall 4 (write)
    swi     $0

    mov     %r0, $0                                // exit status 0 (ok)
    mov     %r7, $1                                // syscall 1 (exit)
    swi     $0

.data

message:
    .ascii      &amp;#34;Hello World!\n&amp;#34;
message_len = . - message&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&#34;compile&#34;&gt;Compile&lt;/h3&gt;
&lt;p&gt;To compile this ARM assembly source code, there are two options&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Install the compiler on your Android phone.&lt;/li&gt;
&lt;li&gt;Use the Android NDK cross-compilation tool to compile on your computer.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here we introduce solution 2, cross-compiling on the computer.&lt;/p&gt;
&lt;p&gt;My development machine is MacOs 10.14, Android NDK is installed on&lt;/p&gt;
&lt;p&gt;/Users/h1yx/Library/Android/sdk/ndk/21.3.6528147&lt;/p&gt;
&lt;p&gt;Then under it&lt;/p&gt;
&lt;p&gt;toolchains/arm-linux-androideabi-4.9/prebuilt/darwin-x86_64/bin/&lt;/p&gt;
&lt;p&gt;The directory can be found&lt;/p&gt;
&lt;p&gt;arm-linux-androideabi-as and arm-linux-androideabi-ld&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Windows students should be able to find arm-linux-androideabi-as.exe and arm-linux-androideabi-ld.exe in similar directories&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is the ARM assembly compiler and linker&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;arm-linux-androideabi-as -o hello.o hello.S
arm-linux-androideabi-ld -o hello hello.o

adb push hello /data/local/tmp/hello
adb shell chmod +x /data/local/tmp/hello
adb shell /data/local/tmp/hello&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Perfect, my first ARM assembly program is running, and it is alsoHello World!Boss should have a different understanding from us.&lt;/p&gt;
&lt;h3 id=&#34;pay-attention&#34;&gt;Pay attention&lt;/h3&gt;
&lt;p&gt;The first word of each line of ARM assembly code is called an assembly instruction.&lt;/p&gt;
&lt;p&gt;r0-rX are called registers, which can be understood as variables that come with the CPU. The access speed is much faster than the memory, but the number is limited.&lt;/p&gt;
&lt;p&gt;There are three instructions in the hello program: mov ldr swi&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MOV data operation instruction&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;mov %r0, $1                                
mov %r2, $message_len&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;LDR memory operation instruction&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ldr %r1, =message              &lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;SWI soft interrupt instruction&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In fact, here we can understand it as a call to the system API.&lt;/p&gt;
&lt;p&gt;Call system API write&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;mov     %r7, $4                        // syscall 4 (write)
swi     $0&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;The parameters of this write API need to be checked in the system manual. &lt;a href=&#34;https://chromium.googlesource.com/chromiumos/docs/+/master/constants/syscalls.md&#34;&gt;https://chromium.googlesource.com/chromiumos/docs/+/master/constants/syscalls.md&lt;/a&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Iphone Jailbreak 2020</title>
      <link>https://578164.xyz/post/other/iphone-jailbreak-2020/</link>
      <pubDate>Sat, 31 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://578164.xyz/post/other/iphone-jailbreak-2020/</guid>
      
        <description>&lt;h2 id=&#34;1-objectives&#34;&gt;1. Objectives&lt;/h2&gt;
&lt;h6 id=&#34;note&#34;&gt;Note:&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;iOS jailbreak&lt;/li&gt;
&lt;li&gt;MacOS Mojave 10.14.6&lt;/li&gt;
&lt;li&gt;Xcode Version 11.3.1&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I was planning to build a framework for app signature calculation based on iOS, but I found that the system of my test phone iPhone 11.2.2 could not be jailbroken. A lot of xx assistants&amp;rsquo; corporate signatures have expired, so I couldn&amp;rsquo;t install jailbreak software. Fortunately, I had used Cydia Impactor to do self-signing before, so I continued to use it, and the result was:&lt;/p&gt;
&lt;h6 id=&#34;hint&#34;&gt;hint&lt;/h6&gt;
&lt;p&gt;file: provision.cpp; line: 81; what: ios/listDevices=3018 &amp;ldquo;Please update to Xcode 7.3 or later to continue developing with your Apple ID.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;file: provision.cpp; line: 81; what: Error analysis&lt;/p&gt;
&lt;p&gt;This will cause the error &amp;ldquo;Please update to Xcode 7.3 or later to continue developing with your Apple ID.&amp;rdquo; to appear when Cydia Impactor is installing IPA. This problem is not caused by a problem with the device or computer, but by Apple adjusting a function on the server side, which makes it impossible for everyone to use Cydia Impactor to install/re-sign IPA.&lt;/p&gt;
&lt;h3 id=&#34;file-provisioncpp-line-81-what-how-to-solve-the-error&#34;&gt;file: provision.cpp; line: 81; what: How to solve the error&lt;/h3&gt;
&lt;p&gt;There is no solution for this problem for ordinary users. They can only wait for Cydia Impactor to release an update. The only way to solve this problem is to install the jailbreak tool through the &amp;ldquo;computer-free webpage&amp;rdquo;. However, we tried many webpages to install the jailbreak tool, but we didn&amp;rsquo;t find a good one.&lt;/p&gt;
&lt;h2 id=&#34;2-results&#34;&gt;2. Results&lt;/h2&gt;
&lt;p&gt;When we were at our wits&amp;rsquo; end, we found a Cydia Impactor alternativeAltDeployThe GitHub address is &lt;a href=&#34;https://github.com/pixelomer/AltDeploy&#34;&gt;https://github.com/pixelomer/AltDeploy&lt;/a&gt; . A total of three versions v1.0 v1.0.1 and v1.1 have been released.&lt;/p&gt;
&lt;p&gt;The mac we are using is &lt;strong&gt;macOS Mojave 10.14.6&lt;/strong&gt; . The latest released version is compatible with &lt;strong&gt;10.14.6&lt;/strong&gt; . After downloading and installing, this version could not be started, so we had to try v1.0.1. This version can be started smoothly, but when installing it, it prompts that the mail plug-in is too old. It turns out that this version of the mail plug-in does not support 10.14.6.&lt;/p&gt;
&lt;p&gt;Fortunately, AltDeploy is open source software. We cloned the code and compiled it using Xcode. An error message appeared on line 309 of /AltDeploy/AltServer/ALTDeviceManager.mm. We did not have time to analyze it for the time being, so we simply blocked this line of code.&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;  /*  	
            if (misagent_copy_all(mis, &amp;amp;rawProfiles) != MISAGENT_E_SUCCESS)
            {
                return finish([NSError errorWithDomain:AltServerErrorDomain code:ALTServerErrorConnectionFailed userInfo:nil]);
            }
 */&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Compilation is successful, run and install &lt;strong&gt;unc0ver&lt;/strong&gt; , and then jailbreak OK.&lt;/p&gt;
&lt;p&gt;When using AltDeploy to sign a document, you need to open the system&amp;rsquo;s mail program.&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Frida installation (I)</title>
      <link>https://578164.xyz/post/other/frida-installationi/</link>
      <pubDate>Fri, 09 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://578164.xyz/post/other/frida-installationi/</guid>
      
        <description>&lt;h2 id=&#34;1-objectives&#34;&gt;1. Objectives&lt;/h2&gt;
&lt;p&gt;Frida is a hook framework based on python+javascript, which can run on various platforms such as android, ios, linux, win, etc. It mainly uses dynamic binary instrumentation technology. It is also a widely used reverse engineering tool.&lt;/p&gt;
&lt;h2 id=&#34;2-installation&#34;&gt;2. Installation&lt;/h2&gt;
&lt;h3 id=&#34;install-frida-on-mac&#34;&gt;Install frida on Mac&lt;/h3&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pip install frida&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h6 id=&#34;tip&#34;&gt;Tip:&lt;/h6&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pip install frida&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;If you have installed an old version before, you must uninstall the old version first.&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pip uninstall frida&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Then install frida-tools&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;pip install frida-tools&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h6 id=&#34;tip-1&#34;&gt;Tip:&lt;/h6&gt;
&lt;p&gt;If prompted &lt;code&gt;PermissionError: [Errno 13] Permission denied: &#39;PKG-INFO&#39;&lt;/code&gt;, you can add&lt;code&gt;sudo&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;After the installation is complete, check the installed frida version&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;frida --version
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;12.11.18&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;install-frida-on-android&#34;&gt;Install frida on android&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/frida/frida/releases&#34;&gt;Install frida-server&lt;/a&gt; on a rooted device&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;First check the phone model and download the corresponding version of &lt;a href=&#34;https://github.com/frida/frida/releases[frida-server]&#34;&gt;https://github.com/frida/frida/releases[frida-server]&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;adb shell getprop ro.product.cpu.abi
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;arm64-v8a&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;My phone model is arm64-v8a, so I downloaded frida-server-12.11.18-android-arm64.xz and unzipped it intofrida-server-12.11.18-android-arm64&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Push the unzipped file to the device, specify the path /data/local/tmp and rename it to &lt;strong&gt;frida-server&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;adb push frida-server-12.11.18-android-arm64 /data/local/tmp/frida-server&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run &lt;em&gt;frida-server&lt;/em&gt; in the android device&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;adb shell
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;su
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cd /data/local/tmp
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;chmod &lt;span style=&#34;color:#ae81ff&#34;&gt;755&lt;/span&gt; frida-server
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./frida-server&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;After the execution is completed, it is in the running state. This shell cannot be closed. If you close it, Frida will stop.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Perform port forwarding monitoring&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;adb forward tcp:27042 tcp:27042
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;adb forward tcp:27043 tcp:27043&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Check whether the &lt;strong&gt;frida-ps -U&lt;/strong&gt; command is successfully executed and the process list is successfully output, as shown below&lt;/p&gt;
&lt;div class=&#34;highlight-container&#34;&gt;

  &lt;button class=&#34;copy-code-btn outline&#34;&gt;Copy&lt;/button&gt;

  
  &lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;MacBook-Pro:~ h1yx$ frida-ps -U
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  PID  Name
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-----  -------------------------------------
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3973&lt;/span&gt;  .dataservices
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;484&lt;/span&gt;  adbd
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ae81ff&#34;&gt;527&lt;/span&gt;  adsprpcd
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3891&lt;/span&gt;  android.ext.services
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; ...&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This way frida is installed successfully.&lt;/p&gt;
</description>
      
    </item>
    
  </channel>
</rss>
